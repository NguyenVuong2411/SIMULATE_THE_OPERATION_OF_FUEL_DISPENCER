CCS PCM C Compiler, Version 5.101, 43599               14-Jan-24 16:17

               Filename:   D:\1912467\CODE\main.lst

               ROM used:   5155 words (63%)
                           Largest free fragment is 2048
               RAM used:   149 (40%) at main() level
                           197 (54%) worst case
               Stack used: 8 locations (5 in main + 3 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   65A
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
004F:  MOVLW  8E
0050:  MOVWF  77
0051:  BSF    03.5
0052:  MOVF   6D,W
0053:  MOVWF  78
0054:  MOVF   6C,W
0055:  MOVWF  79
0056:  CLRF   7A
0057:  MOVF   78,F
0058:  BTFSS  03.2
0059:  GOTO   064
005A:  MOVF   79,W
005B:  MOVWF  78
005C:  CLRF   79
005D:  MOVLW  08
005E:  SUBWF  77,F
005F:  MOVF   78,F
0060:  BTFSS  03.2
0061:  GOTO   064
0062:  CLRF   77
0063:  GOTO   06C
0064:  BCF    03.0
0065:  BTFSC  78.7
0066:  GOTO   06B
0067:  RLF    79,F
0068:  RLF    78,F
0069:  DECF   77,F
006A:  GOTO   064
006B:  BCF    78.7
006C:  BCF    03.5
006D:  RETURN
006E:  BSF    03.5
006F:  MOVF   6D,W
0070:  BCF    03.5
0071:  BSF    03.6
0072:  MOVWF  14
0073:  MOVF   11,W
0074:  XORWF  14,F
0075:  BTFSS  14.7
0076:  GOTO   080
0077:  BCF    03.2
0078:  BCF    03.0
0079:  BSF    03.5
007A:  BCF    03.6
007B:  BTFSC  6D.7
007C:  BSF    03.0
007D:  GOTO   0E5
007E:  BCF    03.5
007F:  BSF    03.6
0080:  BSF    03.5
0081:  BCF    03.6
0082:  MOVF   6D,W
0083:  BCF    03.5
0084:  BSF    03.6
0085:  MOVWF  14
0086:  MOVF   10,W
0087:  MOVWF  15
0088:  BSF    03.5
0089:  BCF    03.6
008A:  MOVF   6C,W
008B:  BCF    03.5
008C:  BSF    03.6
008D:  SUBWF  15,F
008E:  BTFSC  03.2
008F:  GOTO   09D
0090:  BTFSC  14.7
0091:  GOTO   095
0092:  BSF    03.5
0093:  BCF    03.6
0094:  GOTO   0E5
0095:  MOVF   03,W
0096:  XORLW  01
0097:  MOVWF  03
0098:  BSF    03.5
0099:  BCF    03.6
009A:  GOTO   0E5
009B:  BCF    03.5
009C:  BSF    03.6
009D:  MOVF   11,W
009E:  MOVWF  15
009F:  BSF    03.5
00A0:  BCF    03.6
00A1:  MOVF   6D,W
00A2:  BCF    03.5
00A3:  BSF    03.6
00A4:  SUBWF  15,F
00A5:  BTFSC  03.2
00A6:  GOTO   0B4
00A7:  BTFSC  14.7
00A8:  GOTO   0AC
00A9:  BSF    03.5
00AA:  BCF    03.6
00AB:  GOTO   0E5
00AC:  MOVF   03,W
00AD:  XORLW  01
00AE:  MOVWF  03
00AF:  BSF    03.5
00B0:  BCF    03.6
00B1:  GOTO   0E5
00B2:  BCF    03.5
00B3:  BSF    03.6
00B4:  MOVF   12,W
00B5:  MOVWF  15
00B6:  BSF    03.5
00B7:  BCF    03.6
00B8:  MOVF   6E,W
00B9:  BCF    03.5
00BA:  BSF    03.6
00BB:  SUBWF  15,F
00BC:  BTFSC  03.2
00BD:  GOTO   0CB
00BE:  BTFSC  14.7
00BF:  GOTO   0C3
00C0:  BSF    03.5
00C1:  BCF    03.6
00C2:  GOTO   0E5
00C3:  MOVF   03,W
00C4:  XORLW  01
00C5:  MOVWF  03
00C6:  BSF    03.5
00C7:  BCF    03.6
00C8:  GOTO   0E5
00C9:  BCF    03.5
00CA:  BSF    03.6
00CB:  MOVF   13,W
00CC:  MOVWF  15
00CD:  BSF    03.5
00CE:  BCF    03.6
00CF:  MOVF   6F,W
00D0:  BCF    03.5
00D1:  BSF    03.6
00D2:  SUBWF  15,F
00D3:  BTFSC  03.2
00D4:  GOTO   0E2
00D5:  BTFSC  14.7
00D6:  GOTO   0DA
00D7:  BSF    03.5
00D8:  BCF    03.6
00D9:  GOTO   0E5
00DA:  MOVF   03,W
00DB:  XORLW  01
00DC:  MOVWF  03
00DD:  BSF    03.5
00DE:  BCF    03.6
00DF:  GOTO   0E5
00E0:  BCF    03.5
00E1:  BSF    03.6
00E2:  BCF    03.0
00E3:  BSF    03.5
00E4:  BCF    03.6
00E5:  BCF    03.5
00E6:  RETURN
00E7:  MOVLW  80
00E8:  BTFSS  03.1
00E9:  GOTO   0ED
00EA:  BSF    03.6
00EB:  XORWF  11,F
00EC:  BCF    03.6
00ED:  BSF    03.6
00EE:  CLRF   16
00EF:  CLRF   17
00F0:  BSF    03.5
00F1:  BCF    03.6
00F2:  MOVF   6D,W
00F3:  BCF    03.5
00F4:  BSF    03.6
00F5:  MOVWF  15
00F6:  MOVF   11,W
00F7:  XORWF  15,F
00F8:  BSF    03.5
00F9:  BCF    03.6
00FA:  MOVF   6C,W
00FB:  BTFSC  03.2
00FC:  GOTO   201
00FD:  BCF    03.5
00FE:  BSF    03.6
00FF:  MOVWF  14
0100:  MOVWF  77
0101:  MOVF   10,W
0102:  BTFSC  03.2
0103:  GOTO   20C
0104:  SUBWF  14,F
0105:  BTFSC  03.2
0106:  GOTO   19C
0107:  BTFSS  03.0
0108:  GOTO   14A
0109:  MOVF   11,W
010A:  MOVWF  1A
010B:  BSF    1A.7
010C:  MOVF   12,W
010D:  MOVWF  19
010E:  MOVF   13,W
010F:  MOVWF  18
0110:  CLRF   17
0111:  BCF    03.0
0112:  RRF    1A,F
0113:  RRF    19,F
0114:  RRF    18,F
0115:  RRF    17,F
0116:  DECFSZ 14,F
0117:  GOTO   110
0118:  BTFSS  15.7
0119:  GOTO   11D
011A:  BSF    16.0
011B:  GOTO   22C
011C:  BCF    16.0
011D:  BCF    14.0
011E:  BSF    16.4
011F:  MOVLW  EF
0120:  MOVWF  04
0121:  BCF    03.7
0122:  GOTO   241
0123:  BCF    16.4
0124:  BTFSC  15.7
0125:  GOTO   130
0126:  BTFSS  14.0
0127:  GOTO   13B
0128:  RRF    1A,F
0129:  RRF    19,F
012A:  RRF    18,F
012B:  RRF    17,F
012C:  INCF   77,F
012D:  BTFSC  03.2
012E:  GOTO   227
012F:  GOTO   13B
0130:  BTFSC  1A.7
0131:  GOTO   13E
0132:  BCF    03.0
0133:  RLF    17,F
0134:  RLF    18,F
0135:  RLF    19,F
0136:  RLF    1A,F
0137:  DECF   77,F
0138:  BTFSC  03.2
0139:  GOTO   227
013A:  GOTO   130
013B:  BSF    16.6
013C:  GOTO   1C0
013D:  BCF    16.6
013E:  BSF    03.5
013F:  BCF    03.6
0140:  MOVF   6D,W
0141:  BCF    03.5
0142:  BSF    03.6
0143:  MOVWF  15
0144:  BTFSS  15.7
0145:  GOTO   148
0146:  BSF    1A.7
0147:  GOTO   220
0148:  BCF    1A.7
0149:  GOTO   220
014A:  MOVF   10,W
014B:  MOVWF  14
014C:  MOVWF  77
014D:  BSF    03.5
014E:  BCF    03.6
014F:  MOVF   6C,W
0150:  BCF    03.5
0151:  BSF    03.6
0152:  SUBWF  14,F
0153:  BSF    03.5
0154:  BCF    03.6
0155:  MOVF   6D,W
0156:  BCF    03.5
0157:  BSF    03.6
0158:  MOVWF  1A
0159:  BSF    1A.7
015A:  BSF    03.5
015B:  BCF    03.6
015C:  MOVF   6E,W
015D:  BCF    03.5
015E:  BSF    03.6
015F:  MOVWF  19
0160:  BSF    03.5
0161:  BCF    03.6
0162:  MOVF   6F,W
0163:  BCF    03.5
0164:  BSF    03.6
0165:  MOVWF  18
0166:  CLRF   17
0167:  BCF    03.0
0168:  RRF    1A,F
0169:  RRF    19,F
016A:  RRF    18,F
016B:  RRF    17,F
016C:  DECFSZ 14,F
016D:  GOTO   166
016E:  BTFSS  15.7
016F:  GOTO   173
0170:  BSF    16.1
0171:  GOTO   22C
0172:  BCF    16.1
0173:  BCF    14.0
0174:  BSF    16.5
0175:  MOVLW  13
0176:  MOVWF  04
0177:  BSF    03.7
0178:  GOTO   241
0179:  BCF    16.5
017A:  BTFSC  15.7
017B:  GOTO   186
017C:  BTFSS  14.0
017D:  GOTO   191
017E:  RRF    1A,F
017F:  RRF    19,F
0180:  RRF    18,F
0181:  RRF    17,F
0182:  INCF   77,F
0183:  BTFSC  03.2
0184:  GOTO   227
0185:  GOTO   191
0186:  BTFSC  1A.7
0187:  GOTO   194
0188:  BCF    03.0
0189:  RLF    17,F
018A:  RLF    18,F
018B:  RLF    19,F
018C:  RLF    1A,F
018D:  DECF   77,F
018E:  BTFSC  03.2
018F:  GOTO   227
0190:  GOTO   186
0191:  BSF    16.7
0192:  GOTO   1C0
0193:  BCF    16.7
0194:  MOVF   11,W
0195:  MOVWF  15
0196:  BTFSS  15.7
0197:  GOTO   19A
0198:  BSF    1A.7
0199:  GOTO   220
019A:  BCF    1A.7
019B:  GOTO   220
019C:  MOVF   11,W
019D:  MOVWF  1A
019E:  BSF    1A.7
019F:  MOVF   12,W
01A0:  MOVWF  19
01A1:  MOVF   13,W
01A2:  MOVWF  18
01A3:  BTFSS  15.7
01A4:  GOTO   1A9
01A5:  BCF    1A.7
01A6:  BSF    16.2
01A7:  GOTO   22C
01A8:  BCF    16.2
01A9:  CLRF   17
01AA:  BCF    14.0
01AB:  MOVLW  EF
01AC:  MOVWF  04
01AD:  BCF    03.7
01AE:  GOTO   241
01AF:  BTFSC  15.7
01B0:  GOTO   1D6
01B1:  BSF    03.5
01B2:  BCF    03.6
01B3:  MOVF   6D,W
01B4:  BCF    03.5
01B5:  BSF    03.6
01B6:  MOVWF  15
01B7:  BTFSS  14.0
01B8:  GOTO   1C0
01B9:  RRF    1A,F
01BA:  RRF    19,F
01BB:  RRF    18,F
01BC:  RRF    17,F
01BD:  INCF   77,F
01BE:  BTFSC  03.2
01BF:  GOTO   227
01C0:  BTFSS  17.7
01C1:  GOTO   1D1
01C2:  INCF   18,F
01C3:  BTFSS  03.2
01C4:  GOTO   1D1
01C5:  INCF   19,F
01C6:  BTFSS  03.2
01C7:  GOTO   1D1
01C8:  INCF   1A,F
01C9:  BTFSS  03.2
01CA:  GOTO   1D1
01CB:  RRF    1A,F
01CC:  RRF    19,F
01CD:  RRF    18,F
01CE:  INCF   77,F
01CF:  BTFSC  03.2
01D0:  GOTO   227
01D1:  BTFSC  16.6
01D2:  GOTO   13D
01D3:  BTFSC  16.7
01D4:  GOTO   193
01D5:  GOTO   1F9
01D6:  MOVLW  80
01D7:  XORWF  1A,F
01D8:  BTFSS  1A.7
01D9:  GOTO   1DE
01DA:  GOTO   22C
01DB:  MOVF   11,W
01DC:  MOVWF  15
01DD:  GOTO   1EF
01DE:  BSF    03.5
01DF:  BCF    03.6
01E0:  MOVF   6D,W
01E1:  BCF    03.5
01E2:  BSF    03.6
01E3:  MOVWF  15
01E4:  MOVF   1A,F
01E5:  BTFSS  03.2
01E6:  GOTO   1EF
01E7:  MOVF   19,F
01E8:  BTFSS  03.2
01E9:  GOTO   1EF
01EA:  MOVF   18,F
01EB:  BTFSS  03.2
01EC:  GOTO   1EF
01ED:  CLRF   77
01EE:  GOTO   220
01EF:  BTFSC  1A.7
01F0:  GOTO   1F9
01F1:  BCF    03.0
01F2:  RLF    17,F
01F3:  RLF    18,F
01F4:  RLF    19,F
01F5:  RLF    1A,F
01F6:  DECFSZ 77,F
01F7:  GOTO   1EF
01F8:  GOTO   227
01F9:  BTFSS  15.7
01FA:  GOTO   1FD
01FB:  BSF    1A.7
01FC:  GOTO   220
01FD:  BCF    1A.7
01FE:  GOTO   220
01FF:  BSF    03.5
0200:  BCF    03.6
0201:  BCF    03.5
0202:  BSF    03.6
0203:  MOVF   10,W
0204:  MOVWF  77
0205:  MOVF   11,W
0206:  MOVWF  1A
0207:  MOVF   12,W
0208:  MOVWF  19
0209:  MOVF   13,W
020A:  MOVWF  18
020B:  GOTO   220
020C:  BSF    03.5
020D:  BCF    03.6
020E:  MOVF   6C,W
020F:  MOVWF  77
0210:  MOVF   6D,W
0211:  BCF    03.5
0212:  BSF    03.6
0213:  MOVWF  1A
0214:  BSF    03.5
0215:  BCF    03.6
0216:  MOVF   6E,W
0217:  BCF    03.5
0218:  BSF    03.6
0219:  MOVWF  19
021A:  BSF    03.5
021B:  BCF    03.6
021C:  MOVF   6F,W
021D:  BCF    03.5
021E:  BSF    03.6
021F:  MOVWF  18
0220:  MOVF   1A,W
0221:  MOVWF  78
0222:  MOVF   19,W
0223:  MOVWF  79
0224:  MOVF   18,W
0225:  MOVWF  7A
0226:  GOTO   25F
0227:  CLRF   77
0228:  CLRF   78
0229:  CLRF   79
022A:  CLRF   7A
022B:  GOTO   25F
022C:  CLRF   17
022D:  COMF   18,F
022E:  COMF   19,F
022F:  COMF   1A,F
0230:  COMF   17,F
0231:  INCF   17,F
0232:  BTFSS  03.2
0233:  GOTO   23A
0234:  INCF   18,F
0235:  BTFSS  03.2
0236:  GOTO   23A
0237:  INCF   19,F
0238:  BTFSC  03.2
0239:  INCF   1A,F
023A:  BTFSC  16.0
023B:  GOTO   11C
023C:  BTFSC  16.1
023D:  GOTO   172
023E:  BTFSC  16.2
023F:  GOTO   1A8
0240:  GOTO   1DB
0241:  MOVF   00,W
0242:  ADDWF  18,F
0243:  BTFSS  03.0
0244:  GOTO   24B
0245:  INCF   19,F
0246:  BTFSS  03.2
0247:  GOTO   24B
0248:  INCF   1A,F
0249:  BTFSC  03.2
024A:  BSF    14.0
024B:  DECF   04,F
024C:  MOVF   00,W
024D:  ADDWF  19,F
024E:  BTFSS  03.0
024F:  GOTO   253
0250:  INCF   1A,F
0251:  BTFSC  03.2
0252:  BSF    14.0
0253:  DECF   04,F
0254:  MOVF   00,W
0255:  BTFSS  00.7
0256:  XORLW  80
0257:  ADDWF  1A,F
0258:  BTFSC  03.0
0259:  BSF    14.0
025A:  BTFSC  16.4
025B:  GOTO   123
025C:  BTFSC  16.5
025D:  GOTO   179
025E:  GOTO   1AF
025F:  BCF    03.6
0260:  RETURN
0261:  BSF    03.6
0262:  MOVF   19,W
0263:  BTFSC  03.2
0264:  GOTO   2D2
0265:  MOVWF  21
0266:  MOVF   1D,W
0267:  BTFSC  03.2
0268:  GOTO   2D2
0269:  ADDWF  21,F
026A:  BTFSC  03.0
026B:  GOTO   273
026C:  MOVLW  7F
026D:  SUBWF  21,F
026E:  BTFSS  03.0
026F:  GOTO   2D2
0270:  BTFSC  03.2
0271:  GOTO   2D2
0272:  GOTO   277
0273:  MOVLW  81
0274:  ADDWF  21,F
0275:  BTFSC  03.0
0276:  GOTO   2D2
0277:  MOVF   21,W
0278:  MOVWF  77
0279:  CLRF   78
027A:  CLRF   79
027B:  CLRF   7A
027C:  MOVF   1A,W
027D:  MOVWF  25
027E:  BSF    25.7
027F:  MOVF   1B,W
0280:  MOVWF  24
0281:  MOVF   1C,W
0282:  MOVWF  23
0283:  MOVLW  18
0284:  MOVWF  21
0285:  CLRF   22
0286:  BTFSS  23.0
0287:  GOTO   2A0
0288:  MOVF   20,W
0289:  ADDWF  7A,F
028A:  BTFSS  03.0
028B:  GOTO   292
028C:  INCF   79,F
028D:  BTFSS  03.2
028E:  GOTO   292
028F:  INCF   78,F
0290:  BTFSC  03.2
0291:  BSF    22.7
0292:  MOVF   1F,W
0293:  ADDWF  79,F
0294:  BTFSS  03.0
0295:  GOTO   299
0296:  INCF   78,F
0297:  BTFSC  03.2
0298:  BSF    22.7
0299:  MOVF   1E,W
029A:  MOVWF  1B
029B:  BSF    1B.7
029C:  MOVF   1B,W
029D:  ADDWF  78,F
029E:  BTFSC  03.0
029F:  BSF    22.7
02A0:  RLF    22,F
02A1:  RRF    78,F
02A2:  RRF    79,F
02A3:  RRF    7A,F
02A4:  RRF    25,F
02A5:  RRF    24,F
02A6:  RRF    23,F
02A7:  BCF    03.0
02A8:  DECFSZ 21,F
02A9:  GOTO   285
02AA:  MOVLW  01
02AB:  ADDWF  77,F
02AC:  BTFSC  03.0
02AD:  GOTO   2D2
02AE:  BTFSC  78.7
02AF:  GOTO   2B7
02B0:  RLF    25,F
02B1:  RLF    7A,F
02B2:  RLF    79,F
02B3:  RLF    78,F
02B4:  DECF   77,F
02B5:  BTFSC  03.2
02B6:  GOTO   2D2
02B7:  BTFSS  25.7
02B8:  GOTO   2C8
02B9:  INCF   7A,F
02BA:  BTFSS  03.2
02BB:  GOTO   2C8
02BC:  INCF   79,F
02BD:  BTFSS  03.2
02BE:  GOTO   2C8
02BF:  INCF   78,F
02C0:  BTFSS  03.2
02C1:  GOTO   2C8
02C2:  RRF    78,F
02C3:  RRF    79,F
02C4:  RRF    7A,F
02C5:  INCF   77,F
02C6:  BTFSC  03.2
02C7:  GOTO   2D2
02C8:  MOVF   1A,W
02C9:  MOVWF  22
02CA:  MOVF   1E,W
02CB:  XORWF  22,F
02CC:  BTFSS  22.7
02CD:  GOTO   2D0
02CE:  BSF    78.7
02CF:  GOTO   2D6
02D0:  BCF    78.7
02D1:  GOTO   2D6
02D2:  CLRF   77
02D3:  CLRF   78
02D4:  CLRF   79
02D5:  CLRF   7A
02D6:  BCF    03.6
02D7:  RETURN
*
02EC:  BSF    03.5
02ED:  MOVF   6C,W
02EE:  BTFSC  03.2
02EF:  GOTO   3D7
02F0:  BCF    03.5
02F1:  BSF    03.6
02F2:  MOVWF  18
02F3:  MOVF   10,W
02F4:  BTFSS  03.2
02F5:  GOTO   2F9
02F6:  BSF    03.5
02F7:  BCF    03.6
02F8:  GOTO   3D7
02F9:  SUBWF  18,F
02FA:  BTFSS  03.0
02FB:  GOTO   304
02FC:  MOVLW  7F
02FD:  ADDWF  18,F
02FE:  BTFSS  03.0
02FF:  GOTO   303
0300:  BSF    03.5
0301:  BCF    03.6
0302:  GOTO   3D7
0303:  GOTO   310
0304:  MOVLW  81
0305:  SUBWF  18,F
0306:  BTFSC  03.0
0307:  GOTO   30B
0308:  BSF    03.5
0309:  BCF    03.6
030A:  GOTO   3D7
030B:  BTFSS  03.2
030C:  GOTO   310
030D:  BSF    03.5
030E:  BCF    03.6
030F:  GOTO   3D7
0310:  MOVF   18,W
0311:  MOVWF  77
0312:  CLRF   78
0313:  CLRF   79
0314:  CLRF   7A
0315:  CLRF   17
0316:  BSF    03.5
0317:  BCF    03.6
0318:  MOVF   6D,W
0319:  BCF    03.5
031A:  BSF    03.6
031B:  MOVWF  16
031C:  BSF    16.7
031D:  BSF    03.5
031E:  BCF    03.6
031F:  MOVF   6E,W
0320:  BCF    03.5
0321:  BSF    03.6
0322:  MOVWF  15
0323:  BSF    03.5
0324:  BCF    03.6
0325:  MOVF   6F,W
0326:  BCF    03.5
0327:  BSF    03.6
0328:  MOVWF  14
0329:  MOVLW  19
032A:  MOVWF  18
032B:  MOVF   13,W
032C:  SUBWF  14,F
032D:  BTFSC  03.0
032E:  GOTO   33F
032F:  MOVLW  01
0330:  SUBWF  15,F
0331:  BTFSC  03.0
0332:  GOTO   33F
0333:  SUBWF  16,F
0334:  BTFSC  03.0
0335:  GOTO   33F
0336:  SUBWF  17,F
0337:  BTFSC  03.0
0338:  GOTO   33F
0339:  INCF   17,F
033A:  INCF   16,F
033B:  INCF   15,F
033C:  MOVF   13,W
033D:  ADDWF  14,F
033E:  GOTO   371
033F:  MOVF   12,W
0340:  SUBWF  15,F
0341:  BTFSC  03.0
0342:  GOTO   35A
0343:  MOVLW  01
0344:  SUBWF  16,F
0345:  BTFSC  03.0
0346:  GOTO   35A
0347:  SUBWF  17,F
0348:  BTFSC  03.0
0349:  GOTO   35A
034A:  INCF   17,F
034B:  INCF   16,F
034C:  MOVF   12,W
034D:  ADDWF  15,F
034E:  MOVF   13,W
034F:  ADDWF  14,F
0350:  BTFSS  03.0
0351:  GOTO   371
0352:  INCF   15,F
0353:  BTFSS  03.2
0354:  GOTO   371
0355:  INCF   16,F
0356:  BTFSS  03.2
0357:  GOTO   371
0358:  INCF   17,F
0359:  GOTO   371
035A:  MOVF   11,W
035B:  IORLW  80
035C:  SUBWF  16,F
035D:  BTFSC  03.0
035E:  GOTO   370
035F:  MOVLW  01
0360:  SUBWF  17,F
0361:  BTFSC  03.0
0362:  GOTO   370
0363:  INCF   17,F
0364:  MOVF   11,W
0365:  IORLW  80
0366:  ADDWF  16,F
0367:  MOVF   12,W
0368:  ADDWF  15,F
0369:  BTFSS  03.0
036A:  GOTO   34E
036B:  INCF   16,F
036C:  BTFSS  03.2
036D:  GOTO   34E
036E:  INCF   17,F
036F:  GOTO   34E
0370:  BSF    7A.0
0371:  DECFSZ 18,F
0372:  GOTO   374
0373:  GOTO   37F
0374:  BCF    03.0
0375:  RLF    14,F
0376:  RLF    15,F
0377:  RLF    16,F
0378:  RLF    17,F
0379:  BCF    03.0
037A:  RLF    7A,F
037B:  RLF    79,F
037C:  RLF    78,F
037D:  RLF    19,F
037E:  GOTO   32B
037F:  BTFSS  19.0
0380:  GOTO   387
0381:  BCF    03.0
0382:  RRF    78,F
0383:  RRF    79,F
0384:  RRF    7A,F
0385:  RRF    19,F
0386:  GOTO   38C
0387:  DECFSZ 77,F
0388:  GOTO   38C
0389:  BSF    03.5
038A:  BCF    03.6
038B:  GOTO   3D7
038C:  BTFSC  19.7
038D:  GOTO   3B5
038E:  BCF    03.0
038F:  RLF    14,F
0390:  RLF    15,F
0391:  RLF    16,F
0392:  RLF    17,F
0393:  MOVF   13,W
0394:  SUBWF  14,F
0395:  BTFSC  03.0
0396:  GOTO   3A1
0397:  MOVLW  01
0398:  SUBWF  15,F
0399:  BTFSC  03.0
039A:  GOTO   3A1
039B:  SUBWF  16,F
039C:  BTFSC  03.0
039D:  GOTO   3A1
039E:  SUBWF  17,F
039F:  BTFSS  03.0
03A0:  GOTO   3C7
03A1:  MOVF   12,W
03A2:  SUBWF  15,F
03A3:  BTFSC  03.0
03A4:  GOTO   3AC
03A5:  MOVLW  01
03A6:  SUBWF  16,F
03A7:  BTFSC  03.0
03A8:  GOTO   3AC
03A9:  SUBWF  17,F
03AA:  BTFSS  03.0
03AB:  GOTO   3C7
03AC:  MOVF   11,W
03AD:  IORLW  80
03AE:  SUBWF  16,F
03AF:  BTFSC  03.0
03B0:  GOTO   3B5
03B1:  MOVLW  01
03B2:  SUBWF  17,F
03B3:  BTFSS  03.0
03B4:  GOTO   3C7
03B5:  INCF   7A,F
03B6:  BTFSS  03.2
03B7:  GOTO   3C7
03B8:  INCF   79,F
03B9:  BTFSS  03.2
03BA:  GOTO   3C7
03BB:  INCF   78,F
03BC:  BTFSS  03.2
03BD:  GOTO   3C7
03BE:  INCF   77,F
03BF:  BTFSS  03.2
03C0:  GOTO   3C4
03C1:  BSF    03.5
03C2:  BCF    03.6
03C3:  GOTO   3D7
03C4:  RRF    78,F
03C5:  RRF    79,F
03C6:  RRF    7A,F
03C7:  BSF    03.5
03C8:  BCF    03.6
03C9:  MOVF   6D,W
03CA:  BCF    03.5
03CB:  BSF    03.6
03CC:  MOVWF  18
03CD:  MOVF   11,W
03CE:  XORWF  18,F
03CF:  BTFSS  18.7
03D0:  GOTO   3D3
03D1:  BSF    78.7
03D2:  GOTO   3DD
03D3:  BCF    78.7
03D4:  GOTO   3DD
03D5:  BSF    03.5
03D6:  BCF    03.6
03D7:  CLRF   77
03D8:  CLRF   78
03D9:  CLRF   79
03DA:  CLRF   7A
03DB:  BCF    03.5
03DC:  BSF    03.6
03DD:  BCF    03.6
03DE:  RETURN
03DF:  MOVF   0B,W
03E0:  BSF    03.6
03E1:  MOVWF  10
03E2:  BCF    03.6
03E3:  BCF    0B.7
03E4:  BSF    03.5
03E5:  BSF    03.6
03E6:  BSF    0C.7
03E7:  BSF    0C.0
03E8:  NOP
03E9:  NOP
03EA:  BCF    03.5
03EB:  BTFSS  10.7
03EC:  GOTO   3F0
03ED:  BCF    03.6
03EE:  BSF    0B.7
03EF:  BSF    03.6
03F0:  BTFSC  03.0
03F1:  GOTO   420
03F2:  MOVF   0C,W
03F3:  ANDLW  7F
03F4:  MOVWF  10
03F5:  MOVF   0D,W
03F6:  MOVWF  11
03F7:  MOVF   0F,W
03F8:  MOVWF  12
03F9:  MOVF   10,W
03FA:  BCF    03.6
03FB:  BTFSS  0C.4
03FC:  GOTO   3FB
03FD:  MOVWF  19
03FE:  BSF    03.6
03FF:  MOVF   11,W
0400:  MOVWF  0D
0401:  MOVF   12,W
0402:  MOVWF  0F
0403:  BCF    03.6
0404:  MOVF   0B,W
0405:  BSF    03.6
0406:  MOVWF  13
0407:  BCF    03.6
0408:  BCF    0B.7
0409:  BSF    03.5
040A:  BSF    03.6
040B:  BSF    0C.7
040C:  BSF    0C.0
040D:  NOP
040E:  NOP
040F:  BCF    03.5
0410:  BTFSS  13.7
0411:  GOTO   415
0412:  BCF    03.6
0413:  BSF    0B.7
0414:  BSF    03.6
0415:  BSF    03.5
0416:  BCF    03.6
0417:  DECFSZ 6C,F
0418:  GOTO   41A
0419:  GOTO   41D
041A:  BCF    03.5
041B:  BSF    03.6
041C:  GOTO   420
041D:  GOTO   43D
041E:  BCF    03.5
041F:  BSF    03.6
0420:  RLF    0C,W
0421:  RLF    0E,W
0422:  ANDLW  7F
0423:  MOVWF  10
0424:  MOVF   0D,W
0425:  MOVWF  11
0426:  MOVF   0F,W
0427:  MOVWF  12
0428:  MOVF   10,W
0429:  BCF    03.6
042A:  BTFSS  0C.4
042B:  GOTO   42A
042C:  MOVWF  19
042D:  BSF    03.6
042E:  MOVF   11,W
042F:  MOVWF  0D
0430:  MOVF   12,W
0431:  MOVWF  0F
0432:  INCF   0D,F
0433:  BTFSC  03.2
0434:  INCF   0F,F
0435:  BCF    03.0
0436:  BSF    03.5
0437:  BCF    03.6
0438:  DECFSZ 6C,F
0439:  GOTO   43B
043A:  GOTO   43D
043B:  BCF    03.5
043C:  GOTO   3DF
043D:  BCF    03.5
043E:  RETURN
043F:  MOVF   00,F
0440:  BTFSC  03.2
0441:  GOTO   45C
0442:  BSF    03.5
0443:  CLRF   6D
0444:  MOVF   04,W
0445:  MOVWF  6C
0446:  BCF    6D.0
0447:  BTFSC  03.7
0448:  BSF    6D.0
0449:  MOVF   00,W
044A:  BCF    03.5
044B:  BTFSS  0C.4
044C:  GOTO   44B
044D:  MOVWF  19
044E:  BSF    03.5
044F:  MOVF   6C,W
0450:  MOVWF  04
0451:  BCF    03.7
0452:  BTFSC  6D.0
0453:  BSF    03.7
0454:  INCF   04,F
0455:  BTFSS  03.2
0456:  GOTO   45A
0457:  BCF    03.5
0458:  INCF   05,F
0459:  BSF    03.5
045A:  BCF    03.5
045B:  GOTO   43F
045C:  RETURN
045D:  MOVF   0B,W
045E:  BSF    03.5
045F:  MOVWF  6C
0460:  BCF    03.5
0461:  BCF    0B.7
0462:  BSF    03.5
0463:  BSF    03.6
0464:  BSF    0C.7
0465:  BSF    0C.0
0466:  NOP
0467:  NOP
0468:  BCF    03.6
0469:  BTFSS  6C.7
046A:  GOTO   46E
046B:  BCF    03.5
046C:  BSF    0B.7
046D:  BSF    03.5
046E:  BCF    03.5
046F:  BSF    03.6
0470:  MOVF   0C,W
0471:  ANDLW  7F
0472:  BTFSC  03.2
0473:  GOTO   4D1
0474:  BSF    03.5
0475:  BCF    03.6
0476:  MOVWF  6C
0477:  BCF    03.5
0478:  BSF    03.6
0479:  MOVF   0D,W
047A:  BSF    03.5
047B:  BCF    03.6
047C:  MOVWF  6D
047D:  BCF    03.5
047E:  BSF    03.6
047F:  MOVF   0F,W
0480:  BSF    03.5
0481:  BCF    03.6
0482:  MOVWF  6E
0483:  MOVF   6C,W
0484:  BCF    03.5
0485:  BTFSS  0C.4
0486:  GOTO   485
0487:  MOVWF  19
0488:  BSF    03.5
0489:  MOVF   6D,W
048A:  BCF    03.5
048B:  BSF    03.6
048C:  MOVWF  0D
048D:  BSF    03.5
048E:  BCF    03.6
048F:  MOVF   6E,W
0490:  BCF    03.5
0491:  BSF    03.6
0492:  MOVWF  0F
0493:  BCF    03.6
0494:  MOVF   0B,W
0495:  BSF    03.5
0496:  MOVWF  6F
0497:  BCF    03.5
0498:  BCF    0B.7
0499:  BSF    03.5
049A:  BSF    03.6
049B:  BSF    0C.7
049C:  BSF    0C.0
049D:  NOP
049E:  NOP
049F:  BCF    03.6
04A0:  BTFSS  6F.7
04A1:  GOTO   4A5
04A2:  BCF    03.5
04A3:  BSF    0B.7
04A4:  BSF    03.5
04A5:  BCF    03.5
04A6:  BSF    03.6
04A7:  RLF    0C,W
04A8:  RLF    0E,W
04A9:  ANDLW  7F
04AA:  BTFSC  03.2
04AB:  GOTO   4D1
04AC:  BSF    03.5
04AD:  BCF    03.6
04AE:  MOVWF  6C
04AF:  BCF    03.5
04B0:  BSF    03.6
04B1:  MOVF   0D,W
04B2:  BSF    03.5
04B3:  BCF    03.6
04B4:  MOVWF  6D
04B5:  BCF    03.5
04B6:  BSF    03.6
04B7:  MOVF   0F,W
04B8:  BSF    03.5
04B9:  BCF    03.6
04BA:  MOVWF  6E
04BB:  MOVF   6C,W
04BC:  BCF    03.5
04BD:  BTFSS  0C.4
04BE:  GOTO   4BD
04BF:  MOVWF  19
04C0:  BSF    03.5
04C1:  MOVF   6D,W
04C2:  BCF    03.5
04C3:  BSF    03.6
04C4:  MOVWF  0D
04C5:  BSF    03.5
04C6:  BCF    03.6
04C7:  MOVF   6E,W
04C8:  BCF    03.5
04C9:  BSF    03.6
04CA:  MOVWF  0F
04CB:  INCF   0D,F
04CC:  BTFSC  03.2
04CD:  INCF   0F,F
04CE:  BCF    03.6
04CF:  GOTO   45D
04D0:  BSF    03.6
04D1:  BCF    03.6
04D2:  RETURN
04D3:  BSF    03.6
04D4:  MOVF   19,W
04D5:  SUBLW  B6
04D6:  MOVWF  19
04D7:  CLRF   7A
04D8:  MOVF   1A,W
04D9:  MOVWF  1D
04DA:  BSF    1A.7
04DB:  BCF    03.0
04DC:  RRF    1A,F
04DD:  RRF    1B,F
04DE:  RRF    1C,F
04DF:  RRF    7A,F
04E0:  RRF    79,F
04E1:  RRF    78,F
04E2:  RRF    77,F
04E3:  DECFSZ 19,F
04E4:  GOTO   4DB
04E5:  BTFSS  1D.7
04E6:  GOTO   4F2
04E7:  COMF   77,F
04E8:  COMF   78,F
04E9:  COMF   79,F
04EA:  COMF   7A,F
04EB:  INCF   77,F
04EC:  BTFSC  03.2
04ED:  INCF   78,F
04EE:  BTFSC  03.2
04EF:  INCF   79,F
04F0:  BTFSC  03.2
04F1:  INCF   7A,F
04F2:  BCF    03.6
04F3:  RETURN
04F4:  BTFSC  03.1
04F5:  GOTO   4F9
04F6:  MOVLW  21
04F7:  MOVWF  04
04F8:  BSF    03.7
04F9:  CLRF   77
04FA:  CLRF   78
04FB:  CLRF   79
04FC:  CLRF   7A
04FD:  BSF    03.6
04FE:  CLRF   21
04FF:  CLRF   22
0500:  CLRF   23
0501:  CLRF   24
0502:  MOVF   20,W
0503:  IORWF  1F,W
0504:  IORWF  1E,W
0505:  IORWF  1D,W
0506:  BTFSC  03.2
0507:  GOTO   538
0508:  MOVLW  20
0509:  MOVWF  25
050A:  BCF    03.0
050B:  RLF    19,F
050C:  RLF    1A,F
050D:  RLF    1B,F
050E:  RLF    1C,F
050F:  RLF    21,F
0510:  RLF    22,F
0511:  RLF    23,F
0512:  RLF    24,F
0513:  MOVF   20,W
0514:  SUBWF  24,W
0515:  BTFSS  03.2
0516:  GOTO   521
0517:  MOVF   1F,W
0518:  SUBWF  23,W
0519:  BTFSS  03.2
051A:  GOTO   521
051B:  MOVF   1E,W
051C:  SUBWF  22,W
051D:  BTFSS  03.2
051E:  GOTO   521
051F:  MOVF   1D,W
0520:  SUBWF  21,W
0521:  BTFSS  03.0
0522:  GOTO   532
0523:  MOVF   1D,W
0524:  SUBWF  21,F
0525:  MOVF   1E,W
0526:  BTFSS  03.0
0527:  INCFSZ 1E,W
0528:  SUBWF  22,F
0529:  MOVF   1F,W
052A:  BTFSS  03.0
052B:  INCFSZ 1F,W
052C:  SUBWF  23,F
052D:  MOVF   20,W
052E:  BTFSS  03.0
052F:  INCFSZ 20,W
0530:  SUBWF  24,F
0531:  BSF    03.0
0532:  RLF    77,F
0533:  RLF    78,F
0534:  RLF    79,F
0535:  RLF    7A,F
0536:  DECFSZ 25,F
0537:  GOTO   50A
0538:  MOVF   21,W
0539:  MOVWF  00
053A:  INCF   04,F
053B:  MOVF   22,W
053C:  MOVWF  00
053D:  INCF   04,F
053E:  MOVF   23,W
053F:  MOVWF  00
0540:  INCF   04,F
0541:  MOVF   24,W
0542:  MOVWF  00
0543:  BCF    03.6
0544:  RETURN
0545:  MOVF   04,W
0546:  BSF    03.6
0547:  MOVWF  11
0548:  MOVF   10,W
0549:  MOVWF  13
054A:  BTFSC  03.2
054B:  GOTO   579
054C:  BSF    03.5
054D:  BCF    03.6
054E:  MOVF   6F,W
054F:  BCF    03.5
0550:  BSF    03.6
0551:  MOVWF  1C
0552:  BSF    03.5
0553:  BCF    03.6
0554:  MOVF   6E,W
0555:  BCF    03.5
0556:  BSF    03.6
0557:  MOVWF  1B
0558:  BSF    03.5
0559:  BCF    03.6
055A:  MOVF   6D,W
055B:  BCF    03.5
055C:  BSF    03.6
055D:  MOVWF  1A
055E:  BSF    03.5
055F:  BCF    03.6
0560:  MOVF   6C,W
0561:  BCF    03.5
0562:  BSF    03.6
0563:  MOVWF  19
0564:  CLRF   20
0565:  CLRF   1F
0566:  MOVLW  20
0567:  MOVWF  1E
0568:  MOVLW  82
0569:  MOVWF  1D
056A:  BCF    03.6
056B:  CALL   261
056C:  MOVF   7A,W
056D:  BSF    03.5
056E:  MOVWF  6F
056F:  MOVF   79,W
0570:  MOVWF  6E
0571:  MOVF   78,W
0572:  MOVWF  6D
0573:  MOVF   77,W
0574:  MOVWF  6C
0575:  BCF    03.5
0576:  BSF    03.6
0577:  DECFSZ 13,F
0578:  GOTO   54C
0579:  BSF    03.5
057A:  BCF    03.6
057B:  MOVF   6F,W
057C:  BCF    03.5
057D:  BSF    03.6
057E:  MOVWF  1C
057F:  BSF    03.5
0580:  BCF    03.6
0581:  MOVF   6E,W
0582:  BCF    03.5
0583:  BSF    03.6
0584:  MOVWF  1B
0585:  BSF    03.5
0586:  BCF    03.6
0587:  MOVF   6D,W
0588:  BCF    03.5
0589:  BSF    03.6
058A:  MOVWF  1A
058B:  BSF    03.5
058C:  BCF    03.6
058D:  MOVF   6C,W
058E:  BCF    03.5
058F:  BSF    03.6
0590:  MOVWF  19
0591:  BCF    03.6
0592:  CALL   4D3
0593:  MOVF   7A,W
0594:  BSF    03.5
0595:  MOVWF  6F
0596:  MOVF   79,W
0597:  MOVWF  6E
0598:  MOVF   78,W
0599:  MOVWF  6D
059A:  MOVF   77,W
059B:  MOVWF  6C
059C:  BTFSS  6F.7
059D:  GOTO   5AF
059E:  BCF    03.5
059F:  BSF    03.6
05A0:  DECF   11,F
05A1:  BSF    11.5
05A2:  BSF    03.5
05A3:  BCF    03.6
05A4:  COMF   6C,F
05A5:  COMF   6D,F
05A6:  COMF   6E,F
05A7:  COMF   6F,F
05A8:  INCF   6C,F
05A9:  BTFSC  03.2
05AA:  INCF   6D,F
05AB:  BTFSC  03.2
05AC:  INCF   6E,F
05AD:  BTFSC  03.2
05AE:  INCF   6F,F
05AF:  MOVLW  3B
05B0:  BCF    03.5
05B1:  BSF    03.6
05B2:  MOVWF  18
05B3:  MOVLW  9A
05B4:  MOVWF  17
05B5:  MOVLW  CA
05B6:  MOVWF  16
05B7:  CLRF   15
05B8:  MOVLW  0A
05B9:  MOVWF  13
05BA:  MOVF   10,W
05BB:  BTFSC  03.2
05BC:  INCF   11,F
05BD:  BSF    03.1
05BE:  MOVLW  EC
05BF:  MOVWF  04
05C0:  BCF    03.7
05C1:  BSF    03.5
05C2:  BCF    03.6
05C3:  MOVF   6F,W
05C4:  BCF    03.5
05C5:  BSF    03.6
05C6:  MOVWF  1C
05C7:  BSF    03.5
05C8:  BCF    03.6
05C9:  MOVF   6E,W
05CA:  BCF    03.5
05CB:  BSF    03.6
05CC:  MOVWF  1B
05CD:  BSF    03.5
05CE:  BCF    03.6
05CF:  MOVF   6D,W
05D0:  BCF    03.5
05D1:  BSF    03.6
05D2:  MOVWF  1A
05D3:  BSF    03.5
05D4:  BCF    03.6
05D5:  MOVF   6C,W
05D6:  BCF    03.5
05D7:  BSF    03.6
05D8:  MOVWF  19
05D9:  MOVF   18,W
05DA:  MOVWF  20
05DB:  MOVF   17,W
05DC:  MOVWF  1F
05DD:  MOVF   16,W
05DE:  MOVWF  1E
05DF:  MOVF   15,W
05E0:  MOVWF  1D
05E1:  BCF    03.6
05E2:  CALL   4F4
05E3:  MOVF   78,W
05E4:  MOVF   77,F
05E5:  BTFSS  03.2
05E6:  GOTO   5FE
05E7:  BSF    03.6
05E8:  INCF   10,W
05E9:  SUBWF  13,W
05EA:  BTFSS  03.2
05EB:  GOTO   5EE
05EC:  BCF    03.6
05ED:  GOTO   5FE
05EE:  MOVF   11,W
05EF:  BTFSC  03.2
05F0:  GOTO   601
05F1:  ANDLW  0F
05F2:  SUBWF  13,W
05F3:  BTFSC  03.2
05F4:  GOTO   5F7
05F5:  BTFSC  03.0
05F6:  GOTO   63D
05F7:  BTFSC  11.7
05F8:  GOTO   63D
05F9:  BTFSC  11.6
05FA:  GOTO   601
05FB:  MOVLW  20
05FC:  GOTO   636
05FD:  BCF    03.6
05FE:  MOVLW  20
05FF:  BSF    03.6
0600:  ANDWF  11,F
0601:  BTFSS  11.5
0602:  GOTO   612
0603:  BCF    11.5
0604:  MOVF   10,W
0605:  BTFSS  03.2
0606:  DECF   11,F
0607:  MOVF   77,W
0608:  MOVWF  11
0609:  MOVLW  2D
060A:  BCF    03.6
060B:  BTFSS  0C.4
060C:  GOTO   60B
060D:  MOVWF  19
060E:  BSF    03.6
060F:  MOVF   11,W
0610:  MOVWF  77
0611:  CLRF   11
0612:  MOVF   10,W
0613:  SUBWF  13,W
0614:  BTFSS  03.2
0615:  GOTO   623
0616:  MOVF   77,W
0617:  MOVWF  11
0618:  MOVLW  2E
0619:  BCF    03.6
061A:  BTFSS  0C.4
061B:  GOTO   61A
061C:  MOVWF  19
061D:  BSF    03.6
061E:  MOVF   11,W
061F:  MOVWF  77
0620:  MOVLW  20
0621:  ANDWF  11,F
0622:  MOVLW  00
0623:  MOVLW  30
0624:  BTFSS  11.5
0625:  GOTO   636
0626:  BCF    11.5
0627:  MOVF   10,W
0628:  BTFSS  03.2
0629:  DECF   11,F
062A:  MOVF   77,W
062B:  MOVWF  11
062C:  MOVLW  2D
062D:  BCF    03.6
062E:  BTFSS  0C.4
062F:  GOTO   62E
0630:  MOVWF  19
0631:  BSF    03.6
0632:  MOVF   11,W
0633:  MOVWF  77
0634:  CLRF   11
0635:  MOVLW  30
0636:  ADDWF  77,F
0637:  MOVF   77,W
0638:  BCF    03.6
0639:  BTFSS  0C.4
063A:  GOTO   639
063B:  MOVWF  19
063C:  BSF    03.6
063D:  BCF    03.1
063E:  MOVF   18,W
063F:  MOVWF  1C
0640:  MOVF   17,W
0641:  MOVWF  1B
0642:  MOVF   16,W
0643:  MOVWF  1A
0644:  MOVF   15,W
0645:  MOVWF  19
0646:  CLRF   20
0647:  CLRF   1F
0648:  CLRF   1E
0649:  MOVLW  0A
064A:  MOVWF  1D
064B:  BCF    03.6
064C:  CALL   4F4
064D:  MOVF   7A,W
064E:  BSF    03.6
064F:  MOVWF  18
0650:  MOVF   79,W
0651:  MOVWF  17
0652:  MOVF   78,W
0653:  MOVWF  16
0654:  MOVF   77,W
0655:  MOVWF  15
0656:  DECFSZ 13,F
0657:  GOTO   5BD
0658:  BCF    03.6
0659:  RETURN
*
07B5:  DATA 41,2A
07B6:  DATA AB,21
07B7:  DATA 49,28
07B8:  DATA 53,2A
07B9:  DATA 41,29
07BA:  DATA D4,1E
07BB:  DATA 22,2A
07BC:  DATA 43,28
07BD:  DATA 22,16
07BE:  DATA A2,12
07BF:  DATA 73,11
07C0:  DATA 2C,1C
07C1:  DATA B0,06
07C2:  DATA 0A,00
07C3:  DATA 41,2A
07C4:  DATA AB,21
07C5:  DATA 49,28
07C6:  DATA D3,22
07C7:  DATA 4E,22
07C8:  DATA 3D,19
07C9:  DATA 30,18
07CA:  DATA 0D,05
07CB:  DATA 00,00
07CC:  DATA 41,2A
07CD:  DATA AB,21
07CE:  DATA 49,28
07CF:  DATA 43,26
07D0:  DATA CF,29
07D1:  DATA C5,06
07D2:  DATA 0A,00
07D3:  DATA 41,2A
07D4:  DATA 0D,05
07D5:  DATA 00,01
07D6:  DATA 41,2A
07D7:  DATA 2B,29
07D8:  DATA 53,2A
07D9:  DATA 0D,05
07DA:  DATA 00,01
07DB:  DATA 41,2A
07DC:  DATA AB,21
07DD:  DATA D7,26
07DE:  DATA 4F,22
07DF:  DATA C5,1E
07E0:  DATA B1,06
07E1:  DATA 0A,00
07E2:  DATA 41,2A
07E3:  DATA AB,21
07E4:  DATA 57,25
07E5:  DATA 41,28
07E6:  DATA 3D,11
07E7:  DATA A5,39
07E8:  DATA 22,16
07E9:  DATA A2,12
07EA:  DATA 73,11
07EB:  DATA 0D,05
07EC:  DATA 00,01
07ED:  DATA 41,2A
07EE:  DATA AB,21
07EF:  DATA 49,28
07F0:  DATA CD,2A
07F1:  DATA D8,1E
07F2:  DATA B0,06
07F3:  DATA 0A,00
07F4:  DATA 33,18
07F5:  DATA 30,18
07F6:  DATA 30,00
07F7:  DATA 32,18
07F8:  DATA 30,18
07F9:  DATA 30,00
07FA:  DATA 34,18
07FB:  DATA 30,18
07FC:  DATA 30,00
*
0800:  DATA C7,22
0801:  DATA 54,10
0802:  DATA 68,3A
0803:  DATA 74,38
0804:  DATA 73,1D
0805:  DATA AF,17
0806:  DATA 61,38
0807:  DATA 69,17
0808:  DATA 74,34
0809:  DATA 69,37
080A:  DATA E7,39
080B:  DATA F0,32
080C:  DATA E1,35
080D:  DATA AE,31
080E:  DATA EF,36
080F:  DATA AF,3A
0810:  DATA 70,32
0811:  DATA 61,3A
0812:  DATA E5,1F
0813:  DATA 61,38
0814:  DATA E9,2F
0815:  DATA EB,32
0816:  DATA F9,1E
0817:  DATA 4B,2C
0818:  DATA 33,2B
0819:  DATA 56,23
081A:  DATA 38,2A
081B:  DATA B3,1A
081C:  DATA 43,18
081D:  DATA 57,23
081E:  DATA D0,20
081F:  DATA 26,33
0820:  DATA E9,32
0821:  DATA 6C,32
0822:  DATA B2,1E
0823:  DATA 25,18
0824:  DATA AE,19
0825:  DATA 66,13
0826:  DATA E6,34
0827:  DATA 65,36
0828:  DATA E4,18
0829:  DATA BD,12
082A:  DATA 30,17
082B:  DATA 33,33
082C:  DATA 20,24
082D:  DATA 54,2A
082E:  DATA D0,17
082F:  DATA 31,17
0830:  DATA B1,06
0831:  DATA 0A,24
0832:  DATA EF,39
0833:  DATA 74,1D
0834:  DATA A0,30
0835:  DATA F0,34
0836:  DATA 2E,3A
0837:  DATA E8,34
0838:  DATA EE,33
0839:  DATA 73,38
083A:  DATA E5,30
083B:  DATA 6B,17
083C:  DATA E3,37
083D:  DATA ED,06
083E:  DATA 8A,21
083F:  DATA 6F,37
0840:  DATA EE,32
0841:  DATA 63,3A
0842:  DATA E9,37
0843:  DATA 6E,1D
0844:  DATA A0,35
0845:  DATA E5,32
0846:  DATA F0,16
0847:  DATA 61,36
0848:  DATA 69,3B
0849:  DATA E5,06
084A:  DATA 8A,06
084B:  DATA 0A,00
084C:  DATA D3,27
084D:  DATA 20,2A
084E:  DATA C9,22
084F:  DATA 4E,1D
0850:  DATA A0,12
0851:  DATA 30,17
0852:  DATA 30,33
0853:  DATA 00,00
0854:  DATA D3,27
0855:  DATA 20,26
0856:  DATA 49,2A
0857:  DATA 3A,10
0858:  DATA 25,18
0859:  DATA AE,19
085A:  DATA 66,10
085B:  DATA 00,01
085C:  DATA 43,24
085D:  DATA 4F,27
085E:  DATA A0,23
085F:  DATA C9,20
0860:  DATA 3A,00
0861:  DATA C4,27
0862:  DATA 4E,10
0863:  DATA C7,24
0864:  DATA 41,1D
0865:  DATA 20,00
*
0A63:  BCF    0A.0
0A64:  BSF    0A.1
0A65:  BCF    0A.2
0A66:  ADDWF  02,F
0A67:  GOTO   1D9
0A68:  GOTO   1E3
0A69:  GOTO   1ED
0A6A:  GOTO   1F7
*
0AE0:  MOVF   0B,W
0AE1:  BSF    03.5
0AE2:  MOVWF  51
0AE3:  BCF    03.5
0AE4:  BCF    0B.7
0AE5:  BSF    03.5
0AE6:  BSF    03.6
0AE7:  BSF    0C.7
0AE8:  BSF    0C.0
0AE9:  NOP
0AEA:  NOP
0AEB:  BCF    03.6
0AEC:  BTFSS  51.7
0AED:  GOTO   2F1
0AEE:  BCF    03.5
0AEF:  BSF    0B.7
0AF0:  BSF    03.5
0AF1:  BCF    03.5
0AF2:  BSF    03.6
0AF3:  MOVF   0C,W
0AF4:  ANDLW  7F
0AF5:  BTFSC  03.2
0AF6:  GOTO   352
0AF7:  BSF    03.5
0AF8:  BCF    03.6
0AF9:  MOVWF  51
0AFA:  BCF    03.5
0AFB:  BSF    03.6
0AFC:  MOVF   0D,W
0AFD:  BSF    03.5
0AFE:  BCF    03.6
0AFF:  MOVWF  52
0B00:  BCF    03.5
0B01:  BSF    03.6
0B02:  MOVF   0F,W
0B03:  BSF    03.5
0B04:  BCF    03.6
0B05:  MOVWF  53
0B06:  MOVF   51,W
0B07:  MOVWF  5E
0B08:  BCF    03.5
0B09:  CALL   29E
0B0A:  BSF    03.5
0B0B:  MOVF   52,W
0B0C:  BCF    03.5
0B0D:  BSF    03.6
0B0E:  MOVWF  0D
0B0F:  BSF    03.5
0B10:  BCF    03.6
0B11:  MOVF   53,W
0B12:  BCF    03.5
0B13:  BSF    03.6
0B14:  MOVWF  0F
0B15:  BCF    03.6
0B16:  MOVF   0B,W
0B17:  BSF    03.5
0B18:  MOVWF  54
0B19:  BCF    03.5
0B1A:  BCF    0B.7
0B1B:  BSF    03.5
0B1C:  BSF    03.6
0B1D:  BSF    0C.7
0B1E:  BSF    0C.0
0B1F:  NOP
0B20:  NOP
0B21:  BCF    03.6
0B22:  BTFSS  54.7
0B23:  GOTO   327
0B24:  BCF    03.5
0B25:  BSF    0B.7
0B26:  BSF    03.5
0B27:  BCF    03.5
0B28:  BSF    03.6
0B29:  RLF    0C,W
0B2A:  RLF    0E,W
0B2B:  ANDLW  7F
0B2C:  BTFSC  03.2
0B2D:  GOTO   352
0B2E:  BSF    03.5
0B2F:  BCF    03.6
0B30:  MOVWF  51
0B31:  BCF    03.5
0B32:  BSF    03.6
0B33:  MOVF   0D,W
0B34:  BSF    03.5
0B35:  BCF    03.6
0B36:  MOVWF  52
0B37:  BCF    03.5
0B38:  BSF    03.6
0B39:  MOVF   0F,W
0B3A:  BSF    03.5
0B3B:  BCF    03.6
0B3C:  MOVWF  53
0B3D:  MOVF   51,W
0B3E:  MOVWF  5E
0B3F:  BCF    03.5
0B40:  CALL   29E
0B41:  BSF    03.5
0B42:  MOVF   52,W
0B43:  BCF    03.5
0B44:  BSF    03.6
0B45:  MOVWF  0D
0B46:  BSF    03.5
0B47:  BCF    03.6
0B48:  MOVF   53,W
0B49:  BCF    03.5
0B4A:  BSF    03.6
0B4B:  MOVWF  0F
0B4C:  INCF   0D,F
0B4D:  BTFSC  03.2
0B4E:  INCF   0F,F
0B4F:  BCF    03.6
0B50:  GOTO   2E0
0B51:  BSF    03.6
0B52:  BCF    03.6
0B53:  RETURN
0B54:  MOVLW  8E
0B55:  MOVWF  77
0B56:  BSF    03.5
0B57:  MOVF   51,W
0B58:  SUBWF  77,F
0B59:  MOVF   52,W
0B5A:  MOVWF  79
0B5B:  MOVF   53,W
0B5C:  MOVWF  78
0B5D:  BSF    79.7
0B5E:  MOVF   77,F
0B5F:  BTFSC  03.2
0B60:  GOTO   36C
0B61:  BCF    03.0
0B62:  MOVF   79,F
0B63:  BTFSS  03.2
0B64:  GOTO   368
0B65:  MOVF   78,F
0B66:  BTFSC  03.2
0B67:  GOTO   36C
0B68:  RRF    79,F
0B69:  RRF    78,F
0B6A:  DECFSZ 77,F
0B6B:  GOTO   361
0B6C:  BTFSS  52.7
0B6D:  GOTO   373
0B6E:  COMF   78,F
0B6F:  COMF   79,F
0B70:  INCF   78,F
0B71:  BTFSC  03.2
0B72:  INCF   79,F
0B73:  BCF    03.5
0B74:  RETURN
0B75:  MOVF   0B,W
0B76:  BSF    03.5
0B77:  MOVWF  52
0B78:  BCF    03.5
0B79:  BCF    0B.7
0B7A:  BSF    03.5
0B7B:  BSF    03.6
0B7C:  BSF    0C.7
0B7D:  BSF    0C.0
0B7E:  NOP
0B7F:  NOP
0B80:  BCF    03.6
0B81:  BTFSS  52.7
0B82:  GOTO   386
0B83:  BCF    03.5
0B84:  BSF    0B.7
0B85:  BSF    03.5
0B86:  BTFSC  03.0
0B87:  GOTO   3BF
0B88:  BCF    03.5
0B89:  BSF    03.6
0B8A:  MOVF   0C,W
0B8B:  ANDLW  7F
0B8C:  BSF    03.5
0B8D:  BCF    03.6
0B8E:  MOVWF  52
0B8F:  BCF    03.5
0B90:  BSF    03.6
0B91:  MOVF   0D,W
0B92:  BSF    03.5
0B93:  BCF    03.6
0B94:  MOVWF  53
0B95:  BCF    03.5
0B96:  BSF    03.6
0B97:  MOVF   0F,W
0B98:  BSF    03.5
0B99:  BCF    03.6
0B9A:  MOVWF  54
0B9B:  MOVF   52,W
0B9C:  MOVWF  5E
0B9D:  BCF    03.5
0B9E:  CALL   29E
0B9F:  BSF    03.5
0BA0:  MOVF   53,W
0BA1:  BCF    03.5
0BA2:  BSF    03.6
0BA3:  MOVWF  0D
0BA4:  BSF    03.5
0BA5:  BCF    03.6
0BA6:  MOVF   54,W
0BA7:  BCF    03.5
0BA8:  BSF    03.6
0BA9:  MOVWF  0F
0BAA:  BCF    03.6
0BAB:  MOVF   0B,W
0BAC:  BSF    03.5
0BAD:  MOVWF  55
0BAE:  BCF    03.5
0BAF:  BCF    0B.7
0BB0:  BSF    03.5
0BB1:  BSF    03.6
0BB2:  BSF    0C.7
0BB3:  BSF    0C.0
0BB4:  NOP
0BB5:  NOP
0BB6:  BCF    03.6
0BB7:  BTFSS  55.7
0BB8:  GOTO   3BC
0BB9:  BCF    03.5
0BBA:  BSF    0B.7
0BBB:  BSF    03.5
0BBC:  DECFSZ 51,F
0BBD:  GOTO   3BF
0BBE:  GOTO   3ED
0BBF:  BCF    03.5
0BC0:  BSF    03.6
0BC1:  RLF    0C,W
0BC2:  RLF    0E,W
0BC3:  ANDLW  7F
0BC4:  BSF    03.5
0BC5:  BCF    03.6
0BC6:  MOVWF  52
0BC7:  BCF    03.5
0BC8:  BSF    03.6
0BC9:  MOVF   0D,W
0BCA:  BSF    03.5
0BCB:  BCF    03.6
0BCC:  MOVWF  53
0BCD:  BCF    03.5
0BCE:  BSF    03.6
0BCF:  MOVF   0F,W
0BD0:  BSF    03.5
0BD1:  BCF    03.6
0BD2:  MOVWF  54
0BD3:  MOVF   52,W
0BD4:  MOVWF  5E
0BD5:  BCF    03.5
0BD6:  CALL   29E
0BD7:  BSF    03.5
0BD8:  MOVF   53,W
0BD9:  BCF    03.5
0BDA:  BSF    03.6
0BDB:  MOVWF  0D
0BDC:  BSF    03.5
0BDD:  BCF    03.6
0BDE:  MOVF   54,W
0BDF:  BCF    03.5
0BE0:  BSF    03.6
0BE1:  MOVWF  0F
0BE2:  INCF   0D,F
0BE3:  BTFSC  03.2
0BE4:  INCF   0F,F
0BE5:  BCF    03.0
0BE6:  BSF    03.5
0BE7:  BCF    03.6
0BE8:  DECFSZ 51,F
0BE9:  GOTO   3EB
0BEA:  GOTO   3ED
0BEB:  BCF    03.5
0BEC:  GOTO   375
0BED:  BCF    03.5
0BEE:  RETURN
0BEF:  MOVF   04,W
0BF0:  BSF    03.5
0BF1:  MOVWF  56
0BF2:  MOVF   55,W
0BF3:  MOVWF  58
0BF4:  BTFSC  03.2
0BF5:  GOTO   429
0BF6:  BCF    03.5
0BF7:  CLRF   2B
0BF8:  BTFSC  0B.7
0BF9:  BSF    2B.7
0BFA:  BCF    0B.7
0BFB:  BSF    03.5
0BFC:  MOVF   54,W
0BFD:  BCF    03.5
0BFE:  BSF    03.6
0BFF:  MOVWF  1C
0C00:  BSF    03.5
0C01:  BCF    03.6
0C02:  MOVF   53,W
0C03:  BCF    03.5
0C04:  BSF    03.6
0C05:  MOVWF  1B
0C06:  BSF    03.5
0C07:  BCF    03.6
0C08:  MOVF   52,W
0C09:  BCF    03.5
0C0A:  BSF    03.6
0C0B:  MOVWF  1A
0C0C:  BSF    03.5
0C0D:  BCF    03.6
0C0E:  MOVF   51,W
0C0F:  BCF    03.5
0C10:  BSF    03.6
0C11:  MOVWF  19
0C12:  CLRF   20
0C13:  CLRF   1F
0C14:  MOVLW  20
0C15:  MOVWF  1E
0C16:  MOVLW  82
0C17:  MOVWF  1D
0C18:  BCF    0A.3
0C19:  BCF    03.6
0C1A:  CALL   261
0C1B:  BSF    0A.3
0C1C:  BTFSC  2B.7
0C1D:  BSF    0B.7
0C1E:  MOVF   7A,W
0C1F:  BSF    03.5
0C20:  MOVWF  54
0C21:  MOVF   79,W
0C22:  MOVWF  53
0C23:  MOVF   78,W
0C24:  MOVWF  52
0C25:  MOVF   77,W
0C26:  MOVWF  51
0C27:  DECFSZ 58,F
0C28:  GOTO   3F6
0C29:  BCF    03.5
0C2A:  CLRF   2B
0C2B:  BTFSC  0B.7
0C2C:  BSF    2B.7
0C2D:  BCF    0B.7
0C2E:  BSF    03.5
0C2F:  MOVF   54,W
0C30:  BCF    03.5
0C31:  BSF    03.6
0C32:  MOVWF  1C
0C33:  BSF    03.5
0C34:  BCF    03.6
0C35:  MOVF   53,W
0C36:  BCF    03.5
0C37:  BSF    03.6
0C38:  MOVWF  1B
0C39:  BSF    03.5
0C3A:  BCF    03.6
0C3B:  MOVF   52,W
0C3C:  BCF    03.5
0C3D:  BSF    03.6
0C3E:  MOVWF  1A
0C3F:  BSF    03.5
0C40:  BCF    03.6
0C41:  MOVF   51,W
0C42:  BCF    03.5
0C43:  BSF    03.6
0C44:  MOVWF  19
0C45:  BCF    0A.3
0C46:  BCF    03.6
0C47:  CALL   4D3
0C48:  BSF    0A.3
0C49:  BTFSC  2B.7
0C4A:  BSF    0B.7
0C4B:  MOVF   7A,W
0C4C:  BSF    03.5
0C4D:  MOVWF  54
0C4E:  MOVF   79,W
0C4F:  MOVWF  53
0C50:  MOVF   78,W
0C51:  MOVWF  52
0C52:  MOVF   77,W
0C53:  MOVWF  51
0C54:  BTFSS  54.7
0C55:  GOTO   463
0C56:  DECF   56,F
0C57:  BSF    56.5
0C58:  COMF   51,F
0C59:  COMF   52,F
0C5A:  COMF   53,F
0C5B:  COMF   54,F
0C5C:  INCF   51,F
0C5D:  BTFSC  03.2
0C5E:  INCF   52,F
0C5F:  BTFSC  03.2
0C60:  INCF   53,F
0C61:  BTFSC  03.2
0C62:  INCF   54,F
0C63:  MOVLW  3B
0C64:  MOVWF  5D
0C65:  MOVLW  9A
0C66:  MOVWF  5C
0C67:  MOVLW  CA
0C68:  MOVWF  5B
0C69:  CLRF   5A
0C6A:  MOVLW  0A
0C6B:  MOVWF  58
0C6C:  MOVF   55,W
0C6D:  BTFSC  03.2
0C6E:  INCF   56,F
0C6F:  BSF    03.1
0C70:  MOVLW  D1
0C71:  MOVWF  04
0C72:  BCF    03.7
0C73:  BCF    03.5
0C74:  CLRF   2B
0C75:  BTFSC  0B.7
0C76:  BSF    2B.7
0C77:  BCF    0B.7
0C78:  BSF    03.5
0C79:  MOVF   54,W
0C7A:  BCF    03.5
0C7B:  BSF    03.6
0C7C:  MOVWF  1C
0C7D:  BSF    03.5
0C7E:  BCF    03.6
0C7F:  MOVF   53,W
0C80:  BCF    03.5
0C81:  BSF    03.6
0C82:  MOVWF  1B
0C83:  BSF    03.5
0C84:  BCF    03.6
0C85:  MOVF   52,W
0C86:  BCF    03.5
0C87:  BSF    03.6
0C88:  MOVWF  1A
0C89:  BSF    03.5
0C8A:  BCF    03.6
0C8B:  MOVF   51,W
0C8C:  BCF    03.5
0C8D:  BSF    03.6
0C8E:  MOVWF  19
0C8F:  BSF    03.5
0C90:  BCF    03.6
0C91:  MOVF   5D,W
0C92:  BCF    03.5
0C93:  BSF    03.6
0C94:  MOVWF  20
0C95:  BSF    03.5
0C96:  BCF    03.6
0C97:  MOVF   5C,W
0C98:  BCF    03.5
0C99:  BSF    03.6
0C9A:  MOVWF  1F
0C9B:  BSF    03.5
0C9C:  BCF    03.6
0C9D:  MOVF   5B,W
0C9E:  BCF    03.5
0C9F:  BSF    03.6
0CA0:  MOVWF  1E
0CA1:  BSF    03.5
0CA2:  BCF    03.6
0CA3:  MOVF   5A,W
0CA4:  BCF    03.5
0CA5:  BSF    03.6
0CA6:  MOVWF  1D
0CA7:  BCF    0A.3
0CA8:  BCF    03.6
0CA9:  CALL   4F4
0CAA:  BSF    0A.3
0CAB:  BTFSC  2B.7
0CAC:  BSF    0B.7
0CAD:  MOVF   78,W
0CAE:  MOVF   77,F
0CAF:  BTFSS  03.2
0CB0:  GOTO   4C8
0CB1:  BSF    03.5
0CB2:  INCF   55,W
0CB3:  SUBWF  58,W
0CB4:  BTFSS  03.2
0CB5:  GOTO   4B8
0CB6:  BCF    03.5
0CB7:  GOTO   4C8
0CB8:  MOVF   56,W
0CB9:  BTFSC  03.2
0CBA:  GOTO   4CB
0CBB:  ANDLW  0F
0CBC:  SUBWF  58,W
0CBD:  BTFSC  03.2
0CBE:  GOTO   4C1
0CBF:  BTFSC  03.0
0CC0:  GOTO   503
0CC1:  BTFSC  56.7
0CC2:  GOTO   503
0CC3:  BTFSC  56.6
0CC4:  GOTO   4CB
0CC5:  MOVLW  20
0CC6:  GOTO   4FD
0CC7:  BCF    03.5
0CC8:  MOVLW  20
0CC9:  BSF    03.5
0CCA:  ANDWF  56,F
0CCB:  BTFSS  56.5
0CCC:  GOTO   4DB
0CCD:  BCF    56.5
0CCE:  MOVF   55,W
0CCF:  BTFSS  03.2
0CD0:  DECF   56,F
0CD1:  MOVF   77,W
0CD2:  MOVWF  56
0CD3:  MOVLW  2D
0CD4:  MOVWF  5E
0CD5:  BCF    03.5
0CD6:  CALL   29E
0CD7:  BSF    03.5
0CD8:  MOVF   56,W
0CD9:  MOVWF  77
0CDA:  CLRF   56
0CDB:  MOVF   55,W
0CDC:  SUBWF  58,W
0CDD:  BTFSS  03.2
0CDE:  GOTO   4EB
0CDF:  MOVF   77,W
0CE0:  MOVWF  56
0CE1:  MOVLW  2E
0CE2:  MOVWF  5E
0CE3:  BCF    03.5
0CE4:  CALL   29E
0CE5:  BSF    03.5
0CE6:  MOVF   56,W
0CE7:  MOVWF  77
0CE8:  MOVLW  20
0CE9:  ANDWF  56,F
0CEA:  MOVLW  00
0CEB:  MOVLW  30
0CEC:  BTFSS  56.5
0CED:  GOTO   4FD
0CEE:  BCF    56.5
0CEF:  MOVF   55,W
0CF0:  BTFSS  03.2
0CF1:  DECF   56,F
0CF2:  MOVF   77,W
0CF3:  MOVWF  56
0CF4:  MOVLW  2D
0CF5:  MOVWF  5E
0CF6:  BCF    03.5
0CF7:  CALL   29E
0CF8:  BSF    03.5
0CF9:  MOVF   56,W
0CFA:  MOVWF  77
0CFB:  CLRF   56
0CFC:  MOVLW  30
0CFD:  ADDWF  77,F
0CFE:  MOVF   77,W
0CFF:  MOVWF  5E
0D00:  BCF    03.5
0D01:  CALL   29E
0D02:  BSF    03.5
0D03:  BCF    03.1
0D04:  BCF    03.5
0D05:  CLRF   2B
0D06:  BTFSC  0B.7
0D07:  BSF    2B.7
0D08:  BCF    0B.7
0D09:  BSF    03.5
0D0A:  MOVF   5D,W
0D0B:  BCF    03.5
0D0C:  BSF    03.6
0D0D:  MOVWF  1C
0D0E:  BSF    03.5
0D0F:  BCF    03.6
0D10:  MOVF   5C,W
0D11:  BCF    03.5
0D12:  BSF    03.6
0D13:  MOVWF  1B
0D14:  BSF    03.5
0D15:  BCF    03.6
0D16:  MOVF   5B,W
0D17:  BCF    03.5
0D18:  BSF    03.6
0D19:  MOVWF  1A
0D1A:  BSF    03.5
0D1B:  BCF    03.6
0D1C:  MOVF   5A,W
0D1D:  BCF    03.5
0D1E:  BSF    03.6
0D1F:  MOVWF  19
0D20:  CLRF   20
0D21:  CLRF   1F
0D22:  CLRF   1E
0D23:  MOVLW  0A
0D24:  MOVWF  1D
0D25:  BCF    0A.3
0D26:  BCF    03.6
0D27:  CALL   4F4
0D28:  BSF    0A.3
0D29:  BTFSC  2B.7
0D2A:  BSF    0B.7
0D2B:  MOVF   7A,W
0D2C:  BSF    03.5
0D2D:  MOVWF  5D
0D2E:  MOVF   79,W
0D2F:  MOVWF  5C
0D30:  MOVF   78,W
0D31:  MOVWF  5B
0D32:  MOVF   77,W
0D33:  MOVWF  5A
0D34:  DECFSZ 58,F
0D35:  GOTO   46F
0D36:  BCF    03.5
0D37:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=16
.................... #use delay(crystal=20000000)
.................... #use rs232(uart1, baud=9600,ERRORS)
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
.................... 
.................... 
.................... #include <string.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STRING
.................... #define _STRING
.................... #include <stddef.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDDEF
.................... 
.................... #define _STDDEF
.................... 
.................... #if sizeof(unsigned int8 *)==1
.................... #define ptrdiff_t unsigned int8
.................... #else
.................... #define ptrdiff_t unsigned int16
.................... #endif
.................... 
.................... #if defined(__PCB__) || defined(__PCM__)
.................... #define size_t unsigned int8
.................... #else
.................... #define size_t unsigned int16
.................... #endif
.................... #define wchar_t unsigned char
.................... #define NULL 0
.................... 
.................... #define offsetof(s,f) (offsetofbit(s,f)/8)
.................... 
.................... #endif
.................... 
.................... #include <ctype.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _CTYPE
.................... #define _CTYPE
.................... 
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
.................... #define isdigit(x)  isamong(x,"0123456789")
.................... #define isspace(x)  ((x)==' ')
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef")
.................... #define iscntrl(x)  ((x)<' ')
.................... #define isprint(x)  ((x)>=' ')
.................... #define isgraph(x)  ((x)>' ')
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x))
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //////////////////////////////////////////////
.................... //// Uncomment the following define to    ////
.................... //// allow some functions to use a        ////
.................... //// quicker algorithm, but use more ROM  ////
.................... ////                                      ////
.................... //// #define FASTER_BUT_MORE_ROM          ////
.................... //////////////////////////////////////////////
.................... 
.................... 
.................... 
.................... /*Copying functions*/
.................... /* standard template:
....................    void *memmove(void *s1, void *s2, size_t n).
....................    Copies max of n characters safely (not following ending '\0')
....................    from s2 in s1; if s2 has less than n characters, appends 0 */
.................... 
.................... unsigned char *memmove(void *s1,void *s2,size_t n)
.................... {
....................    unsigned char *sc1;
....................    unsigned char *sc2;
....................    sc1=s1;
....................    sc2=s2;
....................    if(sc2<sc1 && sc1 <sc2 +n)
....................       for(sc1+=n,sc2+=n;0<n;--n)
....................          *--sc1=*--sc2;
....................    else
....................       for(;0<n;--n)
....................          *sc1++=*sc2++;
....................   return s1;
....................   }
.................... 
.................... /* Standard template: char *strcpy(char *s1, const char *s2)
....................    copies the string s2 including the null character to s1.
....................    This is a compiler built in to handle the different address
....................    spaces */
.................... 
.................... #define strcopy strcpy
.................... 
.................... /* standard template:
....................    char *strncpy(char *s1, const char *s2, size_t n).
....................    Copies max of n characters (not following ending '\0')
....................    from s2 in s1; if s2 has less than n characters, appends 0 */
.................... 
.................... char *strncpy(char *s1, char *s2, size_t n)
.................... {
....................   char *s;
.................... 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--)
....................      *s++ = *s2++;
....................   for (; n > 0; n--)
....................      *s++ = '\0';
.................... 
....................   return(s1);
.................... }
.................... /***********************************************************/
.................... 
.................... /*concatenation functions*/
.................... /* standard template: char *strcat(char *s1, const char *s2)
.................... appends s2 to s1*/
.................... 
.................... char *strcat(char *s1, char *s2)
.................... {
....................    unsigned char *s;
.................... 
....................    for (s = s1; *s != '\0'; ++s);
....................    while(*s2 != '\0')
....................    {
....................       *s = *s2;
....................       ++s;
....................       ++s2;
....................    }
.................... 
....................    *s = '\0';
....................    return(s1);
.................... }
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n)
.................... appends not more than n characters from s2 to s1*/
.................... 
.................... char *strncat(char *s1, char *s2, size_t n)
.................... {
....................    char *s;
.................... 
....................    for (s = s1; *s != '\0'; ++s);
....................    while(*s2 != '\0' && 0<n)
....................    {
....................       *s = *s2;
....................       ++s;
....................       ++s2;
....................       --n;
....................    }
.................... 
....................    *s = '\0';
....................    return(s1);
.................... }
.................... 
.................... /***********************************************************/
.................... 
.................... 
.................... /*comparison functions*/
.................... /* standard template: signed int memcmp(void *s1, void *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int memcmp(void * s1,void *s2,size_t n)
.................... {
.................... unsigned char *su1, *su2;
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n)
.................... {
....................    if(*su1!=*su2)
....................       return ((*su1<*su2)?-1:1);
.................... }
.................... return 0;
.................... }
.................... 
.................... /* standard template: int strcmp(const char *s1, const char *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int strcmp(char *s1, char *s2)
.................... {
....................    for (; *s1 == *s2; s1++, s2++)
....................       if (*s1 == '\0')
....................          return(0);
....................    return((*s1 < *s2) ? -1: 1);
.................... }
.................... /* standard template: int strcoll(const char *s1, const char *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int strcoll(char *s1, char *s2)
.................... {
....................    for (; *s1 == *s2; s1++, s2++)
....................       if (*s1 == '\0')
....................          return(0);
....................    return((*s1 < *s2) ? -1: 1);
.................... }
.................... 
.................... /* standard template:
....................    int strncmp(const char *s1, const char *s2, size_t n).
....................    Compares max of n characters (not following 0) from s1 to s2;
....................    returns same as strcmp */
.................... 
.................... signed int strncmp(char *s1, char *s2, size_t n)
.................... {
....................    for (; n > 0; s1++, s2++, n--)
....................       if (*s1 != *s2)
....................          return((*s1 <*s2) ? -1: 1);
....................       else if (*s1 == '\0')
....................          return(0);
....................    return(0);
.................... }
.................... /* standard template:
....................    int strxfrm(const char *s1, const char *s2, size_t n).
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1.
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/
.................... size_t strxfrm(char *s1, char *s2, size_t n)
.................... {
....................    char c;
....................    size_t n1;
....................    
....................    if (!s1 && !n)
....................       n = -1; //find length
.................... 
....................    n1 = 0;
....................    
....................    for (; n1 < n; n1++)
....................    {
....................       c = *s2++;
....................       if (!c)
....................          break;
....................       if (s1)
....................          *s1++ = c;
....................    }
.................... 
....................   return(n1);
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /***********************************************************/
.................... /*Search functions*/
.................... /* standard template: void *memchr(const char *s, int c).
....................    Finds first occurrence of c in n characters of s */
.................... 
.................... char *memchr(void *s,unsigned int8 c,size_t n)
.................... {
....................    char uc;
....................    char *su;
....................    uc=c;
....................    for(su=s;0<n;++su,--n)
....................       if(*su==uc)
....................       return su;
....................    return NULL;
.................... }
.................... 
.................... /* standard template: char *strchr(const char *s, int c).
....................    Finds first occurrence of c in s */
.................... 
.................... char *strchr(char *s, char c)
.................... {
....................    for (; *s != c; s++)
....................       if (*s == '\0')
....................          return(0);
....................    return(s);
.................... }
.................... /* standard template:
....................    size_t strcspn(const char *s1, const char *s2).
....................    Computes length of max initial segment of s1 that
....................    consists entirely of characters NOT from s2*/
.................... 
.................... size_t strcspn(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; *sc2 != 0; sc2++)
....................          if (*sc1 == *sc2)
....................             return(sc1 - s1);
....................    return(sc1 - s1);
.................... }
.................... /* standard template:
....................    char *strpbrk(const char *s1, const char *s2).
....................    Locates first occurence of any character from s2 in s1;
....................    returns s1 if s2 is empty string */
.................... 
.................... char *strpbrk(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; *sc2 != 0; sc2++)
....................          if (*sc1 == *sc2)
....................             return(sc1);
....................    return(0);
.................... }
.................... 
.................... 
.................... /* standard template: char *strrchr(const char *s, int c).
....................    Finds last occurrence of c in s */
.................... 
.................... char *strrchr(char *s, char c)
.................... {
....................    char *p;
.................... 
....................    for (p = 0; ; s++)
....................    {
....................       if (*s == c)
....................          p = s;
....................       if (*s == '\0')
....................          return(p);
....................    }
.................... }
.................... /* computes length of max initial segment of s1 consisting
....................    entirely of characters from s2 */
.................... 
.................... size_t strspn(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; ; sc2++)
....................     if (*sc2 == '\0')
....................        return(sc1 - s1);
....................          else if (*sc1 == *sc2)
....................             break;
....................    return(sc1 - s1);
.................... }
.................... /* standard template:
....................    char *strstr(const char *s1, const char *s2);
....................    Locates first occurence of character sequence s2 in s1;
....................    returns 0 if s2 is empty string
.................... 
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the
....................    file to use the faster algorithm */
.................... char *strstr(char *s1, char *s2)
.................... {
....................    char *s, *t;
.................... 
....................    #ifdef FASTER_BUT_MORE_ROM
....................    if (*s2 == '\0')
....................          return(s1);
....................    #endif
.................... 
....................    while (*s1)
....................    {
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t);
.................... 
....................       if (*t == '\0')
....................          return s1;
....................       ++s1;
....................       #ifdef FASTER_BUT_MORE_ROM
....................          while(*s1 != '\0' && *s1 != *s2)
....................             ++s1;
....................       #endif
....................    }
....................    return 0;
.................... }
.................... 
.................... /* standard template: size_t strlen(const char *s).
....................    Computes length of s1 (preceding terminating 0) */
.................... 
.................... size_t strlen(char *s)
.................... {
....................    char *sc;
.................... 
....................    for (sc = s; *sc != 0; sc++);
....................    return(sc - s);
.................... }
.................... 
.................... /* standard template: char *strtok(char *s1, const char *s2).
.................... 
....................    Finds next token in s1 delimited by a character from separator
....................    string s2 (which can be different from call to call).  First call
....................    starts at beginning of s1 searching for first character NOT
....................    contained in s2; returns 0 if none is found.
....................    If one is found, it is the start of first token (return value).
....................    Function then searches from there for a character contained in s2.
....................    If none is found, current token extends to end of s1, and subsequent
....................    searches for a token will return 0.  If one is found, it is
....................    overwritten by '\0', which terminates current token.  Function saves
....................    pointer to following character from which next search will start.
....................    Each subsequent call, with 0 as first argument, starts searching
....................    from saved pointer */
.................... 
.................... char *strtok(char *s1, char *s2)
.................... {
....................    char *beg, *end;
....................    static char *save;
*
1018:  BCF    03.5
1019:  CLRF   2D
101A:  CLRF   2E
.................... 
....................    beg = (s1)? s1: save;
....................    beg += strspn(beg, s2);
....................    if (*beg == '\0')
....................       return(0);
....................       
....................    end = strpbrk(beg, s2);
....................    if (end != '\0')
....................    {
....................       *end = '\0';
....................       end++;
....................       save = end;
....................    }
....................    else
....................       save = beg + strlen(beg);
....................    
....................    return(beg);
.................... }
.................... 
.................... /*****************************************************************/
.................... /*Miscellaneous functions*/
.................... /* standard template
.................... maps error number in errnum to an error message string
.................... Returns: Pointer to string
.................... */
.................... #ifdef _ERRNO
.................... char * strerror(unsigned int8 errnum)
.................... {
.................... static unsigned char s[13];
.................... switch( errnum)
.................... {
.................... case 0:
....................    strcpy(s,"no errors");
....................    return s;
.................... case EDOM :
....................    strcpy(s,"domain error");
....................    return s;
.................... case ERANGE:
....................    strcpy(s,"range error");
....................    return s;
.................... }
.................... }
.................... #ENDIF
.................... 
.................... /* standard template: size_t stricmp(const char *s1, const char *s2).
....................    Compares s1 to s2 ignoring case (upper vs. lower) */
.................... 
.................... signed int stricmp(char *s1, char *s2)
.................... {
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&((char)*s1==(char)*s2+(char)32||(char)*s2==(char)*s1+(char)32));
....................     s1++, s2++)
....................     if (*s1 == '\0')
....................        return(0);
....................  return((*s1 < *s2) ? -1: 1);
.................... }
.................... 
.................... 
.................... /* standard template: char *strlwr(char *s).
....................    Replaces uppercase letters by lowercase;
....................    returns pointer to new string s */
.................... 
.................... char *strlwr(char *s)
.................... {
....................    char *p;
.................... 
....................    for (p = s; *p != '\0'; p++)
....................       if (*p >= 'A' && *p <='Z')
....................          *p += 'a' - 'A';
....................    return(s);
.................... }
.................... 
.................... /* standard template: char *strupr(char *s).
....................    Replaces lowercase letters by upercase;
....................    returns pointer to new string s */
.................... 
.................... char *strupr(char *s)
.................... {
....................    char *p;
.................... 
....................    for (p = s; *p != '\0'; p++)
....................       if (*p >= 'a' && *p <='z')
....................          *p -= 'a' - 'A';
....................    return(s);
.................... }
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #use delay(crystal=20000000)
.................... 
.................... char *SSID="Thuy";                  //ten wifi
101B:  MOVLW  54
101C:  MOVWF  31
101D:  MOVLW  68
101E:  MOVWF  32
101F:  MOVLW  75
1020:  MOVWF  33
1021:  MOVLW  79
1022:  MOVWF  34
1023:  CLRF   35
1024:  CLRF   30
1025:  MOVLW  31
1026:  MOVWF  2F
.................... char *PASS="0908377688";            //pass wifi
1027:  MOVLW  30
1028:  MOVWF  38
1029:  MOVLW  39
102A:  MOVWF  39
102B:  MOVLW  30
102C:  MOVWF  3A
102D:  MOVLW  38
102E:  MOVWF  3B
102F:  MOVLW  33
1030:  MOVWF  3C
1031:  MOVLW  37
1032:  MOVWF  3D
1033:  MOVWF  3E
1034:  MOVLW  36
1035:  MOVWF  3F
1036:  MOVLW  38
1037:  MOVWF  40
1038:  MOVWF  41
1039:  CLRF   42
103A:  CLRF   37
103B:  MOVWF  36
.................... char *WEBSITE="api.thingspeak.com"; //trang web thingspeak 
103C:  MOVLW  61
103D:  MOVWF  45
103E:  MOVLW  70
103F:  MOVWF  46
1040:  MOVLW  69
1041:  MOVWF  47
1042:  MOVLW  2E
1043:  MOVWF  48
1044:  MOVLW  74
1045:  MOVWF  49
1046:  MOVLW  68
1047:  MOVWF  4A
1048:  MOVLW  69
1049:  MOVWF  4B
104A:  MOVLW  6E
104B:  MOVWF  4C
104C:  MOVLW  67
104D:  MOVWF  4D
104E:  MOVLW  73
104F:  MOVWF  4E
1050:  MOVLW  70
1051:  MOVWF  4F
1052:  MOVLW  65
1053:  MOVWF  50
1054:  MOVLW  61
1055:  MOVWF  51
1056:  MOVLW  6B
1057:  MOVWF  52
1058:  MOVLW  2E
1059:  MOVWF  53
105A:  MOVLW  63
105B:  MOVWF  54
105C:  MOVLW  6F
105D:  MOVWF  55
105E:  MOVLW  6D
105F:  MOVWF  56
1060:  CLRF   57
1061:  CLRF   44
1062:  MOVLW  45
1063:  MOVWF  43
.................... 
.................... #include"keypadcode.c" // code quet ban phim
.................... 
.................... #include <keypadcode.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
.................... 
.................... #list
.................... 
....................  
.................... #use delay(crystal=20000000)
*
02D8:  MOVLW  ED
02D9:  MOVWF  04
02DA:  BCF    03.7
02DB:  MOVF   00,W
02DC:  BTFSC  03.2
02DD:  GOTO   2EB
02DE:  MOVLW  06
02DF:  MOVWF  78
02E0:  CLRF   77
02E1:  DECFSZ 77,F
02E2:  GOTO   2E1
02E3:  DECFSZ 78,F
02E4:  GOTO   2E0
02E5:  MOVLW  7B
02E6:  MOVWF  77
02E7:  DECFSZ 77,F
02E8:  GOTO   2E7
02E9:  DECFSZ 00,F
02EA:  GOTO   2DE
02EB:  RETURN
.................... 
.................... 
.................... 
.................... UNSIGNED INT8 HANG,COT,MP,MPT;
.................... /////////////////////////////////////////////////////
.................... void TIMHANG ()
.................... {  HANG=0XFF;
*
09A3:  MOVLW  FF
09A4:  MOVWF  58
....................    if(INPUT(PIN_C0)==0)  {HANG=0;}
09A5:  BSF    5C.0
09A6:  MOVF   5C,W
09A7:  BSF    03.5
09A8:  MOVWF  07
09A9:  BCF    03.5
09AA:  BTFSC  07.0
09AB:  GOTO   1AE
09AC:  CLRF   58
09AD:  GOTO   1CB
....................    else if (INPUT(PIN_C1)==0) {HANG=1;}
09AE:  BSF    5C.1
09AF:  MOVF   5C,W
09B0:  BSF    03.5
09B1:  MOVWF  07
09B2:  BCF    03.5
09B3:  BTFSC  07.1
09B4:  GOTO   1B8
09B5:  MOVLW  01
09B6:  MOVWF  58
09B7:  GOTO   1CB
....................    else if (INPUT(PIN_C2)==0) {HANG=2;}
09B8:  BSF    5C.2
09B9:  MOVF   5C,W
09BA:  BSF    03.5
09BB:  MOVWF  07
09BC:  BCF    03.5
09BD:  BTFSC  07.2
09BE:  GOTO   1C2
09BF:  MOVLW  02
09C0:  MOVWF  58
09C1:  GOTO   1CB
....................    else if (INPUT(PIN_C3)==0) {HANG=3;}
09C2:  BSF    5C.3
09C3:  MOVF   5C,W
09C4:  BSF    03.5
09C5:  MOVWF  07
09C6:  BCF    03.5
09C7:  BTFSC  07.3
09C8:  GOTO   1CB
09C9:  MOVLW  03
09CA:  MOVWF  58
09CB:  RETURN
.................... }
.................... void KEYPRESS()
.................... {
....................    MP=0XFF;
09CC:  MOVLW  FF
09CD:  MOVWF  5A
....................    
....................    for (COT=0;COT<4;COT++)
09CE:  CLRF   59
09CF:  MOVF   59,W
09D0:  SUBLW  03
09D1:  BTFSS  03.0
09D2:  GOTO   262
....................    {
....................       switch(COT)
09D3:  MOVF   59,W
09D4:  ADDLW  FC
09D5:  BTFSC  03.0
09D6:  GOTO   200
09D7:  ADDLW  04
09D8:  GOTO   263
....................       {  case 0:  OUTPUT_LOW(PIN_A5);
09D9:  BSF    03.5
09DA:  BCF    05.5
09DB:  BCF    03.5
09DC:  BCF    05.5
....................                   TIMHANG();
09DD:  CALL   1A3
....................                   OUTPUT_HIGH(PIN_A5);
09DE:  BSF    03.5
09DF:  BCF    05.5
09E0:  BCF    03.5
09E1:  BSF    05.5
....................                   break;
09E2:  GOTO   200
....................          case 1:  OUTPUT_LOW(PIN_A4);
09E3:  BSF    03.5
09E4:  BCF    05.4
09E5:  BCF    03.5
09E6:  BCF    05.4
....................                   TIMHANG();
09E7:  CALL   1A3
....................                   OUTPUT_HIGH(PIN_A4);
09E8:  BSF    03.5
09E9:  BCF    05.4
09EA:  BCF    03.5
09EB:  BSF    05.4
....................                   break;
09EC:  GOTO   200
....................          case 2:  OUTPUT_LOW(PIN_A3);
09ED:  BSF    03.5
09EE:  BCF    05.3
09EF:  BCF    03.5
09F0:  BCF    05.3
....................                   TIMHANG();
09F1:  CALL   1A3
....................                   OUTPUT_HIGH(PIN_A3);
09F2:  BSF    03.5
09F3:  BCF    05.3
09F4:  BCF    03.5
09F5:  BSF    05.3
....................                   break;
09F6:  GOTO   200
....................          case 3:  OUTPUT_LOW(PIN_A2);
09F7:  BSF    03.5
09F8:  BCF    05.2
09F9:  BCF    03.5
09FA:  BCF    05.2
....................                   TIMHANG();
09FB:  CALL   1A3
....................                   OUTPUT_HIGH(PIN_A2);
09FC:  BSF    03.5
09FD:  BCF    05.2
09FE:  BCF    03.5
09FF:  BSF    05.2
....................                   break;
....................       }
....................       if (HANG!=0XFF) {
0A00:  INCFSZ 58,W
0A01:  GOTO   203
0A02:  GOTO   260
....................       
....................       MP=(HANG*4)+COT; 
0A03:  RLF    58,W
0A04:  MOVWF  77
0A05:  RLF    77,F
0A06:  MOVLW  FC
0A07:  ANDWF  77,F
0A08:  MOVF   77,W
0A09:  ADDWF  59,W
0A0A:  MOVWF  5A
....................          if (MP==1) 
0A0B:  DECFSZ 5A,W
0A0C:  GOTO   210
....................          {MP=MP*0;
0A0D:  CLRF   5A
....................          break;}
0A0E:  GOTO   262
0A0F:  GOTO   25F
....................          else if (MP>3 && MP<7)
0A10:  MOVF   5A,W
0A11:  SUBLW  03
0A12:  BTFSC  03.0
0A13:  GOTO   21C
0A14:  MOVF   5A,W
0A15:  SUBLW  06
0A16:  BTFSS  03.0
0A17:  GOTO   21C
....................          {MP=MP-3;
0A18:  MOVLW  03
0A19:  SUBWF  5A,F
....................          break;}
0A1A:  GOTO   262
0A1B:  GOTO   25F
....................          else if (MP==7)
0A1C:  MOVF   5A,W
0A1D:  SUBLW  07
0A1E:  BTFSS  03.2
0A1F:  GOTO   224
....................          {MP=20;
0A20:  MOVLW  14
0A21:  MOVWF  5A
....................          break;}
0A22:  GOTO   262
0A23:  GOTO   25F
....................          else if (MP>7 && MP<11)
0A24:  MOVF   5A,W
0A25:  SUBLW  07
0A26:  BTFSC  03.0
0A27:  GOTO   230
0A28:  MOVF   5A,W
0A29:  SUBLW  0A
0A2A:  BTFSS  03.0
0A2B:  GOTO   230
....................          {MP=MP-4;
0A2C:  MOVLW  04
0A2D:  SUBWF  5A,F
....................          break;}
0A2E:  GOTO   262
0A2F:  GOTO   25F
....................          else if (MP==11)
0A30:  MOVF   5A,W
0A31:  SUBLW  0B
0A32:  BTFSS  03.2
0A33:  GOTO   238
....................          {MP=50;
0A34:  MOVLW  32
0A35:  MOVWF  5A
....................          break;}
0A36:  GOTO   262
0A37:  GOTO   25F
....................          else if (MP>11 && MP<15)
0A38:  MOVF   5A,W
0A39:  SUBLW  0B
0A3A:  BTFSC  03.0
0A3B:  GOTO   244
0A3C:  MOVF   5A,W
0A3D:  SUBLW  0E
0A3E:  BTFSS  03.0
0A3F:  GOTO   244
....................          {MP=MP-5;
0A40:  MOVLW  05
0A41:  SUBWF  5A,F
....................          BREAK;}
0A42:  GOTO   262
0A43:  GOTO   25F
....................          else if (MP==15)
0A44:  MOVF   5A,W
0A45:  SUBLW  0F
0A46:  BTFSS  03.2
0A47:  GOTO   24C
....................          {MP=100;
0A48:  MOVLW  64
0A49:  MOVWF  5A
....................          break;}
0A4A:  GOTO   262
0A4B:  GOTO   25F
....................          else if (MP==0)
0A4C:  MOVF   5A,F
0A4D:  BTFSS  03.2
0A4E:  GOTO   252
....................          {MP=22;}
0A4F:  MOVLW  16
0A50:  MOVWF  5A
0A51:  GOTO   25F
....................          else if (MP==2)
0A52:  MOVF   5A,W
0A53:  SUBLW  02
0A54:  BTFSS  03.2
0A55:  GOTO   259
....................          {MP =23;}
0A56:  MOVLW  17
0A57:  MOVWF  5A
0A58:  GOTO   25F
....................          else if (MP==3)
0A59:  MOVF   5A,W
0A5A:  SUBLW  03
0A5B:  BTFSS  03.2
0A5C:  GOTO   25F
....................          {MP = 24;}
0A5D:  MOVLW  18
0A5E:  MOVWF  5A
....................      
....................       break;}
0A5F:  GOTO   262
0A60:  INCF   59,F
0A61:  GOTO   1CF
....................    }
0A62:  RETURN
....................    
....................   
.................... }
.................... 
.................... void KEY_4X4()
.................... {
....................    KEYPRESS();
*
0A6B:  CALL   1CC
....................    if (MP!=0XFF)
0A6C:  INCFSZ 5A,W
0A6D:  GOTO   26F
0A6E:  GOTO   289
0A6F:  CLRF   2B
0A70:  BTFSC  0B.7
0A71:  BSF    2B.7
0A72:  BCF    0B.7
....................    {
....................       delay_ms(10);
0A73:  MOVLW  0A
0A74:  BSF    03.5
0A75:  MOVWF  6D
0A76:  BCF    0A.3
0A77:  BCF    03.5
0A78:  CALL   2D8
0A79:  BSF    0A.3
0A7A:  BTFSC  2B.7
0A7B:  BSF    0B.7
....................       KEYPRESS();
0A7C:  CALL   1CC
....................       if(MP!=0XFF)
0A7D:  INCFSZ 5A,W
0A7E:  GOTO   280
0A7F:  GOTO   289
....................       {
....................          MPT=MP;
0A80:  MOVF   5A,W
0A81:  MOVWF  5B
....................          
....................          while(MP!=0XFF) {KEYPRESS();}
0A82:  INCFSZ 5A,W
0A83:  GOTO   285
0A84:  GOTO   287
0A85:  CALL   1CC
0A86:  GOTO   282
....................          MP=MPT;
0A87:  MOVF   5B,W
0A88:  MOVWF  5A
....................       }
....................    }
0A89:  RETURN
....................  }
.................... 
.................... extern void KEY_4X4();
.................... 
.................... #define lcd_enable_pin  PIN_E2
.................... #define lcd_rs_pin      PIN_E0      
.................... #define lcd_rw_pin      PIN_E1
.................... #define lcd_data4       PIN_D4
.................... #define lcd_data5       PIN_D5
.................... #define lcd_data6       PIN_D6
.................... #define lcd_data7       PIN_D7
.................... 
....................  // KHAI BAO BIEN//
.................... 
.................... unsigned int8 CHUOI1[] = {"                "};
*
1064:  MOVLW  20
1065:  MOVWF  5D
1066:  MOVWF  5E
1067:  MOVWF  5F
1068:  MOVWF  60
1069:  MOVWF  61
106A:  MOVWF  62
106B:  MOVWF  63
106C:  MOVWF  64
106D:  MOVWF  65
106E:  MOVWF  66
106F:  MOVWF  67
1070:  MOVWF  68
1071:  MOVWF  69
1072:  MOVWF  6A
1073:  MOVWF  6B
1074:  MOVWF  6C
1075:  CLRF   6D
.................... unsigned int16 a1, a2, m1,  m, k;
.................... float a,b,c,d, f,  LIT, tien, tien1;
.................... unsigned int8 CHUOI2[] = {"                "};
1076:  BSF    03.5
1077:  MOVWF  40
1078:  MOVWF  41
1079:  MOVWF  42
107A:  MOVWF  43
107B:  MOVWF  44
107C:  MOVWF  45
107D:  MOVWF  46
107E:  MOVWF  47
107F:  MOVWF  48
1080:  MOVWF  49
1081:  MOVWF  4A
1082:  MOVWF  4B
1083:  MOVWF  4C
1084:  MOVWF  4D
1085:  MOVWF  4E
1086:  MOVWF  4F
1087:  CLRF   50
.................... 
.................... ///// CHUONG TRINH NGAT NGOAI ////////
.................... #INT_EXT
.................... void  EXT_isr(void) 
.................... { 
....................    k=k+1;
*
065A:  MOVLW  01
065B:  ADDWF  7B,F
065C:  BTFSC  03.0
065D:  INCF   7C,F
....................    if (k<d){
065E:  MOVF   7C,W
065F:  BSF    03.5
0660:  MOVWF  6D
0661:  MOVF   7B,W
0662:  MOVWF  6C
0663:  BCF    03.5
0664:  CALL   04F
0665:  MOVF   7A,W
0666:  BSF    03.5
0667:  MOVWF  6F
0668:  MOVF   79,W
0669:  MOVWF  6E
066A:  MOVF   78,W
066B:  MOVWF  6D
066C:  MOVF   77,W
066D:  MOVWF  6C
066E:  MOVF   2F,W
066F:  BCF    03.5
0670:  BSF    03.6
0671:  MOVWF  13
0672:  BSF    03.5
0673:  BCF    03.6
0674:  MOVF   2E,W
0675:  BCF    03.5
0676:  BSF    03.6
0677:  MOVWF  12
0678:  BSF    03.5
0679:  BCF    03.6
067A:  MOVF   2D,W
067B:  BCF    03.5
067C:  BSF    03.6
067D:  MOVWF  11
067E:  BSF    03.5
067F:  BCF    03.6
0680:  MOVF   2C,W
0681:  BCF    03.5
0682:  BSF    03.6
0683:  MOVWF  10
0684:  BCF    03.6
0685:  CALL   06E
0686:  BTFSS  03.0
0687:  GOTO   6ED
....................    LIT = LIT + 0.00225;
0688:  BCF    03.1
0689:  BSF    03.5
068A:  MOVF   37,W
068B:  MOVWF  6F
068C:  MOVF   36,W
068D:  MOVWF  6E
068E:  MOVF   35,W
068F:  MOVWF  6D
0690:  MOVF   34,W
0691:  MOVWF  6C
0692:  MOVLW  BC
0693:  BCF    03.5
0694:  BSF    03.6
0695:  MOVWF  13
0696:  MOVLW  74
0697:  MOVWF  12
0698:  MOVLW  13
0699:  MOVWF  11
069A:  MOVLW  76
069B:  MOVWF  10
069C:  BCF    03.6
069D:  CALL   0E7
069E:  MOVF   7A,W
069F:  BSF    03.5
06A0:  MOVWF  37
06A1:  MOVF   79,W
06A2:  MOVWF  36
06A3:  MOVF   78,W
06A4:  MOVWF  35
06A5:  MOVF   77,W
06A6:  MOVWF  34
....................    tien = tien + b*0.00225;
06A7:  MOVF   27,W
06A8:  BCF    03.5
06A9:  BSF    03.6
06AA:  MOVWF  1C
06AB:  BSF    03.5
06AC:  BCF    03.6
06AD:  MOVF   26,W
06AE:  BCF    03.5
06AF:  BSF    03.6
06B0:  MOVWF  1B
06B1:  BSF    03.5
06B2:  BCF    03.6
06B3:  MOVF   25,W
06B4:  BCF    03.5
06B5:  BSF    03.6
06B6:  MOVWF  1A
06B7:  BSF    03.5
06B8:  BCF    03.6
06B9:  MOVF   24,W
06BA:  BCF    03.5
06BB:  BSF    03.6
06BC:  MOVWF  19
06BD:  MOVLW  BC
06BE:  MOVWF  20
06BF:  MOVLW  74
06C0:  MOVWF  1F
06C1:  MOVLW  13
06C2:  MOVWF  1E
06C3:  MOVLW  76
06C4:  MOVWF  1D
06C5:  BCF    03.6
06C6:  CALL   261
06C7:  BCF    03.1
06C8:  BSF    03.5
06C9:  MOVF   3B,W
06CA:  MOVWF  6F
06CB:  MOVF   3A,W
06CC:  MOVWF  6E
06CD:  MOVF   39,W
06CE:  MOVWF  6D
06CF:  MOVF   38,W
06D0:  MOVWF  6C
06D1:  MOVF   7A,W
06D2:  BCF    03.5
06D3:  BSF    03.6
06D4:  MOVWF  13
06D5:  MOVF   79,W
06D6:  MOVWF  12
06D7:  MOVF   78,W
06D8:  MOVWF  11
06D9:  MOVF   77,W
06DA:  MOVWF  10
06DB:  BCF    03.6
06DC:  CALL   0E7
06DD:  MOVF   7A,W
06DE:  BSF    03.5
06DF:  MOVWF  3B
06E0:  MOVF   79,W
06E1:  MOVWF  3A
06E2:  MOVF   78,W
06E3:  MOVWF  39
06E4:  MOVF   77,W
06E5:  MOVWF  38
....................    output_bit(PIN_A0, 1);
06E6:  BCF    03.5
06E7:  BSF    05.0
06E8:  BSF    03.5
06E9:  BCF    05.0
....................    clear_interrupt(INT_EXT); 
06EA:  BCF    03.5
06EB:  BCF    0B.1
....................             }
06EC:  GOTO   7B1
....................  
....................    else  {
....................    output_bit(PIN_A0, 0);
06ED:  BCF    05.0
06EE:  BSF    03.5
06EF:  BCF    05.0
....................    delay_ms(200);
06F0:  MOVLW  C8
06F1:  MOVWF  6D
06F2:  BCF    03.5
06F3:  CALL   2D8
....................  
....................    // GUI DU LIEU LEN WEB SAU MOI LAN BOM //
....................    tien1 = tien/(10e2); 
06F4:  BSF    03.5
06F5:  MOVF   3B,W
06F6:  MOVWF  6F
06F7:  MOVF   3A,W
06F8:  MOVWF  6E
06F9:  MOVF   39,W
06FA:  MOVWF  6D
06FB:  MOVF   38,W
06FC:  MOVWF  6C
06FD:  BCF    03.5
06FE:  BSF    03.6
06FF:  CLRF   13
0700:  CLRF   12
0701:  MOVLW  7A
0702:  MOVWF  11
0703:  MOVLW  88
0704:  MOVWF  10
0705:  BCF    03.6
0706:  CALL   2EC
0707:  MOVF   7A,W
0708:  BSF    03.5
0709:  MOVWF  3F
070A:  MOVF   79,W
070B:  MOVWF  3E
070C:  MOVF   78,W
070D:  MOVWF  3D
070E:  MOVF   77,W
070F:  MOVWF  3C
....................    int i;
....................    printf("AT+CIPSTART=\"TCP\",\"%s\",80\r\n",WEBSITE);delay_ms(2000); 
0710:  MOVLW  B5
0711:  BCF    03.5
0712:  BSF    03.6
0713:  MOVWF  0D
0714:  MOVLW  07
0715:  MOVWF  0F
0716:  BCF    03.0
0717:  MOVLW  13
0718:  BSF    03.5
0719:  BCF    03.6
071A:  MOVWF  6C
071B:  BCF    03.5
071C:  CALL   3DF
071D:  MOVF   43,W
071E:  MOVWF  04
071F:  BCF    03.7
0720:  BTFSC  44.0
0721:  BSF    03.7
0722:  CALL   43F
0723:  MOVLW  BF
0724:  BSF    03.6
0725:  MOVWF  0D
0726:  MOVLW  07
0727:  MOVWF  0F
0728:  BSF    03.0
0729:  MOVLW  06
072A:  BSF    03.5
072B:  BCF    03.6
072C:  MOVWF  6C
072D:  BCF    03.5
072E:  CALL   3DF
072F:  MOVLW  08
0730:  BSF    03.5
0731:  MOVWF  6C
0732:  MOVLW  FA
0733:  MOVWF  6D
0734:  BCF    03.5
0735:  CALL   2D8
0736:  BSF    03.5
0737:  DECFSZ 6C,F
0738:  GOTO   732
....................    printf("AT+CIPSEND=200\r\n");delay_ms(2000);
0739:  MOVLW  C3
073A:  BCF    03.5
073B:  BSF    03.6
073C:  MOVWF  0D
073D:  MOVLW  07
073E:  MOVWF  0F
073F:  BCF    03.6
0740:  CALL   45D
0741:  MOVLW  08
0742:  BSF    03.5
0743:  MOVWF  6C
0744:  MOVLW  FA
0745:  MOVWF  6D
0746:  BCF    03.5
0747:  CALL   2D8
0748:  BSF    03.5
0749:  DECFSZ 6C,F
074A:  GOTO   744
....................   
....................    for (i=0 ; i<2 ; i++) {
074B:  CLRF   6B
074C:  MOVF   6B,W
074D:  SUBLW  01
074E:  BTFSS  03.0
074F:  GOTO   79A
....................    printf("GET https://api.thingspeak.com/update?api_key=KX3VVF8T35C0WFPA&field2=%0.3f&field1=%0.3f HTTP/1.1\r\nHost: api.thingspeak.com\r\nConnection: keep-alive\r\n\r\n",tien1,LIT);
0750:  MOVLW  00
0751:  BCF    03.5
0752:  BSF    03.6
0753:  MOVWF  0D
0754:  MOVLW  08
0755:  MOVWF  0F
0756:  BCF    03.0
0757:  MOVLW  46
0758:  BSF    03.5
0759:  BCF    03.6
075A:  MOVWF  6C
075B:  BCF    03.5
075C:  CALL   3DF
075D:  MOVLW  C9
075E:  MOVWF  04
075F:  BSF    03.5
0760:  MOVF   3F,W
0761:  MOVWF  6F
0762:  MOVF   3E,W
0763:  MOVWF  6E
0764:  MOVF   3D,W
0765:  MOVWF  6D
0766:  MOVF   3C,W
0767:  MOVWF  6C
0768:  MOVLW  03
0769:  BCF    03.5
076A:  BSF    03.6
076B:  MOVWF  10
076C:  BCF    03.6
076D:  CALL   545
076E:  MOVLW  25
076F:  BSF    03.6
0770:  MOVWF  0D
0771:  MOVLW  08
0772:  MOVWF  0F
0773:  BSF    03.0
0774:  MOVLW  08
0775:  BSF    03.5
0776:  BCF    03.6
0777:  MOVWF  6C
0778:  BCF    03.5
0779:  CALL   3DF
077A:  MOVLW  C9
077B:  MOVWF  04
077C:  BSF    03.5
077D:  MOVF   37,W
077E:  MOVWF  6F
077F:  MOVF   36,W
0780:  MOVWF  6E
0781:  MOVF   35,W
0782:  MOVWF  6D
0783:  MOVF   34,W
0784:  MOVWF  6C
0785:  MOVLW  03
0786:  BCF    03.5
0787:  BSF    03.6
0788:  MOVWF  10
0789:  BCF    03.6
078A:  CALL   545
078B:  MOVLW  2C
078C:  BSF    03.6
078D:  MOVWF  0D
078E:  MOVLW  08
078F:  MOVWF  0F
0790:  BCF    03.0
0791:  MOVLW  3F
0792:  BSF    03.5
0793:  BCF    03.6
0794:  MOVWF  6C
0795:  BCF    03.5
0796:  CALL   3DF
0797:  BSF    03.5
0798:  INCF   6B,F
0799:  GOTO   74C
....................    }
....................    delay_ms(700);
079A:  MOVLW  04
079B:  MOVWF  6C
079C:  MOVLW  AF
079D:  MOVWF  6D
079E:  BCF    03.5
079F:  CALL   2D8
07A0:  BSF    03.5
07A1:  DECFSZ 6C,F
07A2:  GOTO   79C
....................    printf("AT+CIPCLOSE\r\n");delay_ms(200);
07A3:  MOVLW  CC
07A4:  BCF    03.5
07A5:  BSF    03.6
07A6:  MOVWF  0D
07A7:  MOVLW  07
07A8:  MOVWF  0F
07A9:  BCF    03.6
07AA:  CALL   45D
07AB:  MOVLW  C8
07AC:  BSF    03.5
07AD:  MOVWF  6D
07AE:  BCF    03.5
07AF:  CALL   2D8
....................    clear_interrupt(INT_EXT);
07B0:  BCF    0B.1
....................   }
....................  
.................... }
....................  
....................  //CHUONG TRINH CHINH//~~
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
07B1:  BCF    0B.1
07B2:  BCF    0A.3
07B3:  BCF    0A.4
07B4:  GOTO   02B
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
08D9:  BSF    08.4
....................    output_float(LCD_DATA5);
08DA:  BSF    08.5
....................    output_float(LCD_DATA6);
08DB:  BSF    08.6
....................    output_float(LCD_DATA7);
08DC:  BSF    08.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
08DD:  BCF    03.5
08DE:  BSF    09.1
08DF:  BSF    03.5
08E0:  BCF    09.1
....................    delay_cycles(1);
08E1:  NOP
....................    lcd_output_enable(1);
08E2:  BCF    03.5
08E3:  BSF    09.2
08E4:  BSF    03.5
08E5:  BCF    09.2
....................    delay_cycles(1);
08E6:  NOP
....................    high = lcd_read_nibble();
08E7:  BCF    03.5
08E8:  CALL   09E
08E9:  MOVF   78,W
08EA:  BSF    03.5
08EB:  MOVWF  66
....................       
....................    lcd_output_enable(0);
08EC:  BCF    03.5
08ED:  BCF    09.2
08EE:  BSF    03.5
08EF:  BCF    09.2
....................    delay_cycles(1);
08F0:  NOP
....................    lcd_output_enable(1);
08F1:  BCF    03.5
08F2:  BSF    09.2
08F3:  BSF    03.5
08F4:  BCF    09.2
....................    delay_us(1);
08F5:  GOTO   0F6
08F6:  GOTO   0F7
08F7:  NOP
....................    low = lcd_read_nibble();
08F8:  BCF    03.5
08F9:  CALL   09E
08FA:  MOVF   78,W
08FB:  BSF    03.5
08FC:  MOVWF  65
....................       
....................    lcd_output_enable(0);
08FD:  BCF    03.5
08FE:  BCF    09.2
08FF:  BSF    03.5
0900:  BCF    09.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0901:  BCF    08.4
....................    output_drive(LCD_DATA5);
0902:  BCF    08.5
....................    output_drive(LCD_DATA6);
0903:  BCF    08.6
....................    output_drive(LCD_DATA7);
0904:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0905:  SWAPF  66,W
0906:  MOVWF  77
0907:  MOVLW  F0
0908:  ANDWF  77,F
0909:  MOVF   77,W
090A:  IORWF  65,W
090B:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
089E:  BSF    03.5
089F:  CLRF   67
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
08A0:  BSF    08.4
08A1:  MOVLW  00
08A2:  BCF    03.5
08A3:  BTFSC  08.4
08A4:  MOVLW  01
08A5:  BSF    03.5
08A6:  IORWF  67,F
....................    n |= input(LCD_DATA5) << 1;
08A7:  BSF    08.5
08A8:  MOVLW  00
08A9:  BCF    03.5
08AA:  BTFSC  08.5
08AB:  MOVLW  01
08AC:  MOVWF  77
08AD:  BCF    03.0
08AE:  RLF    77,F
08AF:  MOVF   77,W
08B0:  BSF    03.5
08B1:  IORWF  67,F
....................    n |= input(LCD_DATA6) << 2;
08B2:  BSF    08.6
08B3:  MOVLW  00
08B4:  BCF    03.5
08B5:  BTFSC  08.6
08B6:  MOVLW  01
08B7:  MOVWF  77
08B8:  RLF    77,F
08B9:  RLF    77,F
08BA:  MOVLW  FC
08BB:  ANDWF  77,F
08BC:  MOVF   77,W
08BD:  BSF    03.5
08BE:  IORWF  67,F
....................    n |= input(LCD_DATA7) << 3;
08BF:  BSF    08.7
08C0:  MOVLW  00
08C1:  BCF    03.5
08C2:  BTFSC  08.7
08C3:  MOVLW  01
08C4:  MOVWF  77
08C5:  RLF    77,F
08C6:  RLF    77,F
08C7:  RLF    77,F
08C8:  MOVLW  F8
08C9:  ANDWF  77,F
08CA:  MOVF   77,W
08CB:  BSF    03.5
08CC:  IORWF  67,F
....................    
....................    return(n);
08CD:  MOVF   67,W
08CE:  MOVWF  78
....................   #else
08CF:  BCF    03.5
08D0:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0866:  BSF    03.5
0867:  BTFSC  66.0
0868:  GOTO   06D
0869:  BCF    03.5
086A:  BCF    08.4
086B:  GOTO   06F
086C:  BSF    03.5
086D:  BCF    03.5
086E:  BSF    08.4
086F:  BSF    03.5
0870:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0871:  BTFSC  66.1
0872:  GOTO   077
0873:  BCF    03.5
0874:  BCF    08.5
0875:  GOTO   079
0876:  BSF    03.5
0877:  BCF    03.5
0878:  BSF    08.5
0879:  BSF    03.5
087A:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
087B:  BTFSC  66.2
087C:  GOTO   081
087D:  BCF    03.5
087E:  BCF    08.6
087F:  GOTO   083
0880:  BSF    03.5
0881:  BCF    03.5
0882:  BSF    08.6
0883:  BSF    03.5
0884:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
0885:  BTFSC  66.3
0886:  GOTO   08B
0887:  BCF    03.5
0888:  BCF    08.7
0889:  GOTO   08D
088A:  BSF    03.5
088B:  BCF    03.5
088C:  BSF    08.7
088D:  BSF    03.5
088E:  BCF    08.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
088F:  NOP
....................    lcd_output_enable(1);
0890:  BCF    03.5
0891:  BSF    09.2
0892:  BSF    03.5
0893:  BCF    09.2
....................    delay_us(2);
0894:  MOVLW  03
0895:  MOVWF  77
0896:  DECFSZ 77,F
0897:  GOTO   096
....................    lcd_output_enable(0);
0898:  BCF    03.5
0899:  BCF    09.2
089A:  BSF    03.5
089B:  BCF    09.2
089C:  BCF    03.5
089D:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
08D1:  BSF    03.5
08D2:  BCF    09.2
....................    lcd_rs_tris();
08D3:  BCF    09.0
....................    lcd_rw_tris();
08D4:  BCF    09.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
08D5:  BCF    03.5
08D6:  BCF    09.0
08D7:  BSF    03.5
08D8:  BCF    09.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
090C:  MOVF   78,W
090D:  MOVWF  65
090E:  BTFSC  65.7
090F:  GOTO   0D9
....................    lcd_output_rs(address);
0910:  MOVF   63,F
0911:  BTFSS  03.2
0912:  GOTO   117
0913:  BCF    03.5
0914:  BCF    09.0
0915:  GOTO   119
0916:  BSF    03.5
0917:  BCF    03.5
0918:  BSF    09.0
0919:  BSF    03.5
091A:  BCF    09.0
....................    delay_cycles(1);
091B:  NOP
....................    lcd_output_rw(0);
091C:  BCF    03.5
091D:  BCF    09.1
091E:  BSF    03.5
091F:  BCF    09.1
....................    delay_cycles(1);
0920:  NOP
....................    lcd_output_enable(0);
0921:  BCF    03.5
0922:  BCF    09.2
0923:  BSF    03.5
0924:  BCF    09.2
....................    lcd_send_nibble(n >> 4);
0925:  SWAPF  64,W
0926:  MOVWF  65
0927:  MOVLW  0F
0928:  ANDWF  65,F
0929:  MOVF   65,W
092A:  MOVWF  66
092B:  BCF    03.5
092C:  CALL   066
....................    lcd_send_nibble(n & 0xf);
092D:  BSF    03.5
092E:  MOVF   64,W
092F:  ANDLW  0F
0930:  MOVWF  65
0931:  MOVWF  66
0932:  BCF    03.5
0933:  CALL   066
0934:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0935:  MOVLW  28
0936:  BSF    03.5
0937:  MOVWF  52
0938:  MOVLW  0C
0939:  MOVWF  53
093A:  MOVLW  01
093B:  MOVWF  54
093C:  MOVLW  06
093D:  MOVWF  55
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
093E:  BCF    03.5
093F:  BCF    09.2
0940:  BSF    03.5
0941:  BCF    09.2
....................    lcd_output_rs(0);
0942:  BCF    03.5
0943:  BCF    09.0
0944:  BSF    03.5
0945:  BCF    09.0
....................    lcd_output_rw(0);
0946:  BCF    03.5
0947:  BCF    09.1
0948:  BSF    03.5
0949:  BCF    09.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
094A:  BCF    08.4
....................    output_drive(LCD_DATA5);
094B:  BCF    08.5
....................    output_drive(LCD_DATA6);
094C:  BCF    08.6
....................    output_drive(LCD_DATA7);
094D:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
094E:  BCF    09.2
....................    lcd_rs_tris();
094F:  BCF    09.0
....................    lcd_rw_tris();
0950:  BCF    09.1
0951:  BCF    03.5
0952:  CLRF   2B
0953:  BTFSC  0B.7
0954:  BSF    2B.7
0955:  BCF    0B.7
....................  #endif
....................     
....................    delay_ms(15);
0956:  MOVLW  0F
0957:  BSF    03.5
0958:  MOVWF  6D
0959:  BCF    0A.3
095A:  BCF    03.5
095B:  CALL   2D8
095C:  BSF    0A.3
095D:  BTFSC  2B.7
095E:  BSF    0B.7
....................    for(i=1;i<=3;++i)
095F:  MOVLW  01
0960:  BSF    03.5
0961:  MOVWF  51
0962:  MOVF   51,W
0963:  SUBLW  03
0964:  BTFSS  03.0
0965:  GOTO   17A
....................    {
....................        lcd_send_nibble(3);
0966:  MOVLW  03
0967:  MOVWF  66
0968:  BCF    03.5
0969:  CALL   066
096A:  CLRF   2B
096B:  BTFSC  0B.7
096C:  BSF    2B.7
096D:  BCF    0B.7
....................        delay_ms(5);
096E:  MOVLW  05
096F:  BSF    03.5
0970:  MOVWF  6D
0971:  BCF    0A.3
0972:  BCF    03.5
0973:  CALL   2D8
0974:  BSF    0A.3
0975:  BTFSC  2B.7
0976:  BSF    0B.7
0977:  BSF    03.5
0978:  INCF   51,F
0979:  GOTO   162
....................    }
....................    
....................    lcd_send_nibble(2);
097A:  MOVLW  02
097B:  MOVWF  66
097C:  BCF    03.5
097D:  CALL   066
097E:  CLRF   2B
097F:  BTFSC  0B.7
0980:  BSF    2B.7
0981:  BCF    0B.7
....................    delay_ms(5);
0982:  MOVLW  05
0983:  BSF    03.5
0984:  MOVWF  6D
0985:  BCF    0A.3
0986:  BCF    03.5
0987:  CALL   2D8
0988:  BSF    0A.3
0989:  BTFSC  2B.7
098A:  BSF    0B.7
....................    for(i=0;i<=3;++i)
098B:  BSF    03.5
098C:  CLRF   51
098D:  MOVF   51,W
098E:  SUBLW  03
098F:  BTFSS  03.0
0990:  GOTO   19F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0991:  MOVLW  D2
0992:  ADDWF  51,W
0993:  MOVWF  04
0994:  BCF    03.7
0995:  MOVF   00,W
0996:  MOVWF  56
0997:  CLRF   63
0998:  MOVF   56,W
0999:  MOVWF  64
099A:  BCF    03.5
099B:  CALL   0D1
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
099C:  BSF    03.5
099D:  INCF   51,F
099E:  GOTO   18D
099F:  BCF    03.5
09A0:  BCF    0A.3
09A1:  BSF    0A.4
09A2:  GOTO   09E (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
0A8A:  BSF    03.5
0A8B:  DECFSZ 60,W
0A8C:  GOTO   28E
0A8D:  GOTO   291
....................       address=LCD_LINE_TWO;
0A8E:  MOVLW  40
0A8F:  MOVWF  61
0A90:  GOTO   292
....................    else
....................       address=0;
0A91:  CLRF   61
....................      
....................    address+=x-1;
0A92:  MOVLW  01
0A93:  SUBWF  5F,W
0A94:  ADDWF  61,F
....................    lcd_send_byte(0,0x80|address);
0A95:  MOVF   61,W
0A96:  IORLW  80
0A97:  MOVWF  62
0A98:  CLRF   63
0A99:  MOVF   62,W
0A9A:  MOVWF  64
0A9B:  BCF    03.5
0A9C:  CALL   0D1
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0A9D:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0A9E:  BSF    03.5
0A9F:  MOVF   5E,W
0AA0:  XORLW  07
0AA1:  BCF    03.5
0AA2:  BTFSC  03.2
0AA3:  GOTO   2AE
0AA4:  XORLW  0B
0AA5:  BTFSC  03.2
0AA6:  GOTO   2B5
0AA7:  XORLW  06
0AA8:  BTFSC  03.2
0AA9:  GOTO   2C9
0AAA:  XORLW  02
0AAB:  BTFSC  03.2
0AAC:  GOTO   2D1
0AAD:  GOTO   2D8
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0AAE:  MOVLW  01
0AAF:  BSF    03.5
0AB0:  MOVWF  5F
0AB1:  MOVWF  60
0AB2:  BCF    03.5
0AB3:  CALL   28A
0AB4:  GOTO   2DF
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0AB5:  BSF    03.5
0AB6:  CLRF   63
0AB7:  MOVLW  01
0AB8:  MOVWF  64
0AB9:  BCF    03.5
0ABA:  CALL   0D1
0ABB:  CLRF   2B
0ABC:  BTFSC  0B.7
0ABD:  BSF    2B.7
0ABE:  BCF    0B.7
....................                      delay_ms(2);
0ABF:  MOVLW  02
0AC0:  BSF    03.5
0AC1:  MOVWF  6D
0AC2:  BCF    0A.3
0AC3:  BCF    03.5
0AC4:  CALL   2D8
0AC5:  BSF    0A.3
0AC6:  BTFSC  2B.7
0AC7:  BSF    0B.7
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0AC8:  GOTO   2DF
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0AC9:  MOVLW  01
0ACA:  BSF    03.5
0ACB:  MOVWF  5F
0ACC:  MOVLW  02
0ACD:  MOVWF  60
0ACE:  BCF    03.5
0ACF:  CALL   28A
0AD0:  GOTO   2DF
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0AD1:  BSF    03.5
0AD2:  CLRF   63
0AD3:  MOVLW  10
0AD4:  MOVWF  64
0AD5:  BCF    03.5
0AD6:  CALL   0D1
0AD7:  GOTO   2DF
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0AD8:  MOVLW  01
0AD9:  BSF    03.5
0ADA:  MOVWF  63
0ADB:  MOVF   5E,W
0ADC:  MOVWF  64
0ADD:  BCF    03.5
0ADE:  CALL   0D1
....................      #endif
....................    }
0ADF:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... void main()
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  CLRF   2C
1004:  MOVLW  81
1005:  BSF    03.5
1006:  MOVWF  19
1007:  MOVLW  A6
1008:  MOVWF  18
1009:  MOVLW  90
100A:  BCF    03.5
100B:  MOVWF  18
100C:  MOVLW  FF
100D:  MOVWF  5C
100E:  CLRF   7E
100F:  CLRF   7D
1010:  BSF    03.5
1011:  BSF    1F.0
1012:  BSF    1F.1
1013:  BSF    1F.2
1014:  BCF    1F.3
1015:  MOVLW  07
1016:  MOVWF  1C
1017:  BCF    03.7
.................... { 
....................    set_tris_B(0x0F); // B input
*
1088:  MOVLW  0F
1089:  MOVWF  06
....................    set_tris_D(0);    // D output
108A:  MOVLW  00
108B:  MOVWF  08
....................    set_tris_E(0);    // E output
108C:  BCF    09.0
108D:  BCF    09.1
108E:  BCF    09.2
....................    set_tris_A(0);    // A output
108F:  MOVWF  05
....................    output_bit(PIN_A0, 1);           // bat dau chuong trinh relay dong
1090:  BCF    03.5
1091:  BSF    05.0
1092:  BSF    03.5
1093:  BCF    05.0
....................    enable_interrupts(INT_EXT);      // ngat ngoai
1094:  BCF    03.5
1095:  BSF    0B.4
....................    enable_interrupts(GLOBAL);       // ngat toan cuc
1096:  MOVLW  C0
1097:  IORWF  0B,F
....................    ext_int_edge(H_TO_L);  
1098:  BSF    03.5
1099:  BCF    01.6
....................    lcd_init(); 
109A:  BCF    0A.4
109B:  BSF    0A.3
109C:  BCF    03.5
109D:  GOTO   135
109E:  BSF    0A.4
109F:  BCF    0A.3
.................... 
....................    printf("AT\r\n");delay_ms(1000);
10A0:  MOVLW  D3
10A1:  BSF    03.6
10A2:  MOVWF  0D
10A3:  MOVLW  07
10A4:  MOVWF  0F
10A5:  BCF    03.6
10A6:  CLRF   2B
10A7:  BTFSC  0B.7
10A8:  BSF    2B.7
10A9:  BCF    0B.7
10AA:  BCF    0A.4
10AB:  CALL   45D
10AC:  BSF    0A.4
10AD:  BTFSC  2B.7
10AE:  BSF    0B.7
10AF:  MOVLW  04
10B0:  BSF    03.5
10B1:  MOVWF  51
10B2:  BCF    03.5
10B3:  CLRF   2B
10B4:  BTFSC  0B.7
10B5:  BSF    2B.7
10B6:  BCF    0B.7
10B7:  MOVLW  FA
10B8:  BSF    03.5
10B9:  MOVWF  6D
10BA:  BCF    0A.4
10BB:  BCF    03.5
10BC:  CALL   2D8
10BD:  BSF    0A.4
10BE:  BTFSC  2B.7
10BF:  BSF    0B.7
10C0:  BSF    03.5
10C1:  DECFSZ 51,F
10C2:  GOTO   0B2
....................    printf("AT+RST\r\n");delay_ms(1000);
10C3:  MOVLW  D6
10C4:  BCF    03.5
10C5:  BSF    03.6
10C6:  MOVWF  0D
10C7:  MOVLW  07
10C8:  MOVWF  0F
10C9:  BCF    03.6
10CA:  CLRF   2B
10CB:  BTFSC  0B.7
10CC:  BSF    2B.7
10CD:  BCF    0B.7
10CE:  BCF    0A.4
10CF:  CALL   45D
10D0:  BSF    0A.4
10D1:  BTFSC  2B.7
10D2:  BSF    0B.7
10D3:  MOVLW  04
10D4:  BSF    03.5
10D5:  MOVWF  51
10D6:  BCF    03.5
10D7:  CLRF   2B
10D8:  BTFSC  0B.7
10D9:  BSF    2B.7
10DA:  BCF    0B.7
10DB:  MOVLW  FA
10DC:  BSF    03.5
10DD:  MOVWF  6D
10DE:  BCF    0A.4
10DF:  BCF    03.5
10E0:  CALL   2D8
10E1:  BSF    0A.4
10E2:  BTFSC  2B.7
10E3:  BSF    0B.7
10E4:  BSF    03.5
10E5:  DECFSZ 51,F
10E6:  GOTO   0D6
....................    printf("AT+CWMODE=1\r\n");delay_ms(1000);
10E7:  MOVLW  DB
10E8:  BCF    03.5
10E9:  BSF    03.6
10EA:  MOVWF  0D
10EB:  MOVLW  07
10EC:  MOVWF  0F
10ED:  BCF    03.6
10EE:  CLRF   2B
10EF:  BTFSC  0B.7
10F0:  BSF    2B.7
10F1:  BCF    0B.7
10F2:  BCF    0A.4
10F3:  CALL   45D
10F4:  BSF    0A.4
10F5:  BTFSC  2B.7
10F6:  BSF    0B.7
10F7:  MOVLW  04
10F8:  BSF    03.5
10F9:  MOVWF  51
10FA:  BCF    03.5
10FB:  CLRF   2B
10FC:  BTFSC  0B.7
10FD:  BSF    2B.7
10FE:  BCF    0B.7
10FF:  MOVLW  FA
1100:  BSF    03.5
1101:  MOVWF  6D
1102:  BCF    0A.4
1103:  BCF    03.5
1104:  CALL   2D8
1105:  BSF    0A.4
1106:  BTFSC  2B.7
1107:  BSF    0B.7
1108:  BSF    03.5
1109:  DECFSZ 51,F
110A:  GOTO   0FA
....................    printf("AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PASS);delay_ms(4000); // thay mat khau va tai khoan tuong ung
110B:  MOVLW  E2
110C:  BCF    03.5
110D:  BSF    03.6
110E:  MOVWF  0D
110F:  MOVLW  07
1110:  MOVWF  0F
1111:  BCF    03.0
1112:  BCF    03.6
1113:  CLRF   2B
1114:  BTFSC  0B.7
1115:  BSF    2B.7
1116:  BCF    0B.7
1117:  MOVLW  0A
1118:  BSF    03.5
1119:  MOVWF  6C
111A:  BCF    0A.4
111B:  BCF    03.5
111C:  CALL   3DF
111D:  BSF    0A.4
111E:  BTFSC  2B.7
111F:  BSF    0B.7
1120:  MOVF   2F,W
1121:  MOVWF  04
1122:  BCF    03.7
1123:  BTFSC  30.0
1124:  BSF    03.7
1125:  CLRF   2B
1126:  BTFSC  0B.7
1127:  BSF    2B.7
1128:  BCF    0B.7
1129:  BCF    0A.4
112A:  CALL   43F
112B:  BSF    0A.4
112C:  BTFSC  2B.7
112D:  BSF    0B.7
112E:  MOVLW  22
112F:  BTFSS  0C.4
1130:  GOTO   12F
1131:  MOVWF  19
1132:  MOVLW  2C
1133:  BTFSS  0C.4
1134:  GOTO   133
1135:  MOVWF  19
1136:  MOVLW  22
1137:  BTFSS  0C.4
1138:  GOTO   137
1139:  MOVWF  19
113A:  MOVF   36,W
113B:  MOVWF  04
113C:  BCF    03.7
113D:  BTFSC  37.0
113E:  BSF    03.7
113F:  CLRF   2B
1140:  BTFSC  0B.7
1141:  BSF    2B.7
1142:  BCF    0B.7
1143:  BCF    0A.4
1144:  CALL   43F
1145:  BSF    0A.4
1146:  BTFSC  2B.7
1147:  BSF    0B.7
1148:  MOVLW  22
1149:  BTFSS  0C.4
114A:  GOTO   149
114B:  MOVWF  19
114C:  MOVLW  0D
114D:  BTFSS  0C.4
114E:  GOTO   14D
114F:  MOVWF  19
1150:  MOVLW  0A
1151:  BTFSS  0C.4
1152:  GOTO   151
1153:  MOVWF  19
1154:  MOVLW  10
1155:  BSF    03.5
1156:  MOVWF  51
1157:  BCF    03.5
1158:  CLRF   2B
1159:  BTFSC  0B.7
115A:  BSF    2B.7
115B:  BCF    0B.7
115C:  MOVLW  FA
115D:  BSF    03.5
115E:  MOVWF  6D
115F:  BCF    0A.4
1160:  BCF    03.5
1161:  CALL   2D8
1162:  BSF    0A.4
1163:  BTFSC  2B.7
1164:  BSF    0B.7
1165:  BSF    03.5
1166:  DECFSZ 51,F
1167:  GOTO   157
....................    printf("AT+CIPMUX=0\r\n");delay_ms(1000);
1168:  MOVLW  ED
1169:  BCF    03.5
116A:  BSF    03.6
116B:  MOVWF  0D
116C:  MOVLW  07
116D:  MOVWF  0F
116E:  BCF    03.6
116F:  CLRF   2B
1170:  BTFSC  0B.7
1171:  BSF    2B.7
1172:  BCF    0B.7
1173:  BCF    0A.4
1174:  CALL   45D
1175:  BSF    0A.4
1176:  BTFSC  2B.7
1177:  BSF    0B.7
1178:  MOVLW  04
1179:  BSF    03.5
117A:  MOVWF  51
117B:  BCF    03.5
117C:  CLRF   2B
117D:  BTFSC  0B.7
117E:  BSF    2B.7
117F:  BCF    0B.7
1180:  MOVLW  FA
1181:  BSF    03.5
1182:  MOVWF  6D
1183:  BCF    0A.4
1184:  BCF    03.5
1185:  CALL   2D8
1186:  BSF    0A.4
1187:  BTFSC  2B.7
1188:  BSF    0B.7
1189:  BSF    03.5
118A:  DECFSZ 51,F
118B:  GOTO   17B
....................    
....................    LAP:    
....................    KEY_4X4();
118C:  BCF    0A.4
118D:  BSF    0A.3
118E:  BCF    03.5
118F:  BCF    03.6
1190:  CALL   26B
1191:  BSF    0A.4
1192:  BCF    0A.3
....................    if(MP!=0x0FF)
1193:  INCFSZ 5A,W
1194:  GOTO   196
1195:  GOTO   65C
....................    {
....................      if(MP<11) 
1196:  MOVF   5A,W
1197:  SUBLW  0A
1198:  BTFSS  03.0
1199:  GOTO   32B
....................          {   m = m++;
119A:  MOVF   75,W
119B:  MOVWF  7A
119C:  MOVF   74,W
119D:  INCF   74,F
119E:  BTFSC  03.2
119F:  INCF   75,F
11A0:  MOVWF  74
11A1:  MOVF   7A,W
11A2:  MOVWF  75
....................              f = f*(10^(m)) + MP;  // f la gia tri tien nhap vao
11A3:  MOVF   74,W
11A4:  XORLW  0A
11A5:  MOVWF  77
11A6:  MOVF   75,W
11A7:  MOVWF  7A
11A8:  MOVF   77,W
11A9:  CLRF   2B
11AA:  BTFSC  0B.7
11AB:  BSF    2B.7
11AC:  BCF    0B.7
11AD:  BSF    03.5
11AE:  MOVWF  6C
11AF:  MOVF   75,W
11B0:  MOVWF  6D
11B1:  BCF    0A.4
11B2:  BCF    03.5
11B3:  CALL   04F
11B4:  BSF    0A.4
11B5:  BTFSC  2B.7
11B6:  BSF    0B.7
11B7:  CLRF   2B
11B8:  BTFSC  0B.7
11B9:  BSF    2B.7
11BA:  BCF    0B.7
11BB:  BSF    03.5
11BC:  MOVF   33,W
11BD:  BCF    03.5
11BE:  BSF    03.6
11BF:  MOVWF  1C
11C0:  BSF    03.5
11C1:  BCF    03.6
11C2:  MOVF   32,W
11C3:  BCF    03.5
11C4:  BSF    03.6
11C5:  MOVWF  1B
11C6:  BSF    03.5
11C7:  BCF    03.6
11C8:  MOVF   31,W
11C9:  BCF    03.5
11CA:  BSF    03.6
11CB:  MOVWF  1A
11CC:  BSF    03.5
11CD:  BCF    03.6
11CE:  MOVF   30,W
11CF:  BCF    03.5
11D0:  BSF    03.6
11D1:  MOVWF  19
11D2:  MOVF   7A,W
11D3:  MOVWF  20
11D4:  MOVF   79,W
11D5:  MOVWF  1F
11D6:  MOVF   78,W
11D7:  MOVWF  1E
11D8:  MOVF   77,W
11D9:  MOVWF  1D
11DA:  BCF    0A.4
11DB:  BCF    03.6
11DC:  CALL   261
11DD:  BSF    0A.4
11DE:  BTFSC  2B.7
11DF:  BSF    0B.7
11E0:  MOVF   7A,W
11E1:  BSF    03.5
11E2:  MOVWF  54
11E3:  MOVF   79,W
11E4:  MOVWF  53
11E5:  MOVF   78,W
11E6:  MOVWF  52
11E7:  MOVF   77,W
11E8:  MOVWF  51
11E9:  BCF    03.5
11EA:  CLRF   2B
11EB:  BTFSC  0B.7
11EC:  BSF    2B.7
11ED:  BCF    0B.7
11EE:  BSF    03.5
11EF:  CLRF   6D
11F0:  BCF    03.5
11F1:  MOVF   5A,W
11F2:  BSF    03.5
11F3:  MOVWF  6C
11F4:  BCF    0A.4
11F5:  BCF    03.5
11F6:  CALL   04F
11F7:  BSF    0A.4
11F8:  BTFSC  2B.7
11F9:  BSF    0B.7
11FA:  BCF    03.1
11FB:  CLRF   2B
11FC:  BTFSC  0B.7
11FD:  BSF    2B.7
11FE:  BCF    0B.7
11FF:  BSF    03.5
1200:  MOVF   54,W
1201:  MOVWF  6F
1202:  MOVF   53,W
1203:  MOVWF  6E
1204:  MOVF   52,W
1205:  MOVWF  6D
1206:  MOVF   51,W
1207:  MOVWF  6C
1208:  MOVF   7A,W
1209:  BCF    03.5
120A:  BSF    03.6
120B:  MOVWF  13
120C:  MOVF   79,W
120D:  MOVWF  12
120E:  MOVF   78,W
120F:  MOVWF  11
1210:  MOVF   77,W
1211:  MOVWF  10
1212:  BCF    0A.4
1213:  BCF    03.6
1214:  CALL   0E7
1215:  BSF    0A.4
1216:  BTFSC  2B.7
1217:  BSF    0B.7
1218:  MOVF   7A,W
1219:  BSF    03.5
121A:  MOVWF  33
121B:  MOVF   79,W
121C:  MOVWF  32
121D:  MOVF   78,W
121E:  MOVWF  31
121F:  MOVF   77,W
1220:  MOVWF  30
1221:  BCF    03.5
1222:  CLRF   2B
1223:  BTFSC  0B.7
1224:  BSF    2B.7
1225:  BCF    0B.7
....................              if (f>100){
1226:  BSF    03.5
1227:  CLRF   6F
1228:  CLRF   6E
1229:  MOVLW  48
122A:  MOVWF  6D
122B:  MOVLW  85
122C:  MOVWF  6C
122D:  MOVF   33,W
122E:  BCF    03.5
122F:  BSF    03.6
1230:  MOVWF  13
1231:  BSF    03.5
1232:  BCF    03.6
1233:  MOVF   32,W
1234:  BCF    03.5
1235:  BSF    03.6
1236:  MOVWF  12
1237:  BSF    03.5
1238:  BCF    03.6
1239:  MOVF   31,W
123A:  BCF    03.5
123B:  BSF    03.6
123C:  MOVWF  11
123D:  BSF    03.5
123E:  BCF    03.6
123F:  MOVF   30,W
1240:  BCF    03.5
1241:  BSF    03.6
1242:  MOVWF  10
1243:  BCF    0A.4
1244:  BCF    03.6
1245:  CALL   06E
1246:  BSF    0A.4
1247:  BTFSC  2B.7
1248:  BSF    0B.7
1249:  BTFSS  03.0
124A:  GOTO   2A6
124B:  CLRF   2B
124C:  BTFSC  0B.7
124D:  BSF    2B.7
124E:  BCF    0B.7
....................              c = f/b;
124F:  BSF    03.5
1250:  MOVF   33,W
1251:  MOVWF  6F
1252:  MOVF   32,W
1253:  MOVWF  6E
1254:  MOVF   31,W
1255:  MOVWF  6D
1256:  MOVF   30,W
1257:  MOVWF  6C
1258:  MOVF   27,W
1259:  BCF    03.5
125A:  BSF    03.6
125B:  MOVWF  13
125C:  BSF    03.5
125D:  BCF    03.6
125E:  MOVF   26,W
125F:  BCF    03.5
1260:  BSF    03.6
1261:  MOVWF  12
1262:  BSF    03.5
1263:  BCF    03.6
1264:  MOVF   25,W
1265:  BCF    03.5
1266:  BSF    03.6
1267:  MOVWF  11
1268:  BSF    03.5
1269:  BCF    03.6
126A:  MOVF   24,W
126B:  BCF    03.5
126C:  BSF    03.6
126D:  MOVWF  10
126E:  BCF    0A.4
126F:  BCF    03.6
1270:  CALL   2EC
1271:  BSF    0A.4
1272:  BTFSC  2B.7
1273:  BSF    0B.7
1274:  MOVF   7A,W
1275:  BSF    03.5
1276:  MOVWF  2B
1277:  MOVF   79,W
1278:  MOVWF  2A
1279:  MOVF   78,W
127A:  MOVWF  29
127B:  MOVF   77,W
127C:  MOVWF  28
127D:  BCF    03.5
127E:  CLRF   2B
127F:  BTFSC  0B.7
1280:  BSF    2B.7
1281:  BCF    0B.7
....................              d = c/(2.25e-3);}    // d la so xung can dem 
1282:  BSF    03.5
1283:  MOVF   2B,W
1284:  MOVWF  6F
1285:  MOVF   2A,W
1286:  MOVWF  6E
1287:  MOVF   29,W
1288:  MOVWF  6D
1289:  MOVF   28,W
128A:  MOVWF  6C
128B:  MOVLW  BC
128C:  BCF    03.5
128D:  BSF    03.6
128E:  MOVWF  13
128F:  MOVLW  74
1290:  MOVWF  12
1291:  MOVLW  13
1292:  MOVWF  11
1293:  MOVLW  76
1294:  MOVWF  10
1295:  BCF    0A.4
1296:  BCF    03.6
1297:  CALL   2EC
1298:  BSF    0A.4
1299:  BTFSC  2B.7
129A:  BSF    0B.7
129B:  MOVF   7A,W
129C:  BSF    03.5
129D:  MOVWF  2F
129E:  MOVF   79,W
129F:  MOVWF  2E
12A0:  MOVF   78,W
12A1:  MOVWF  2D
12A2:  MOVF   77,W
12A3:  MOVWF  2C
12A4:  GOTO   2CC
12A5:  BCF    03.5
12A6:  CLRF   2B
12A7:  BTFSC  0B.7
12A8:  BSF    2B.7
12A9:  BCF    0B.7
....................              else {d=f/0.00225;}
12AA:  BSF    03.5
12AB:  MOVF   33,W
12AC:  MOVWF  6F
12AD:  MOVF   32,W
12AE:  MOVWF  6E
12AF:  MOVF   31,W
12B0:  MOVWF  6D
12B1:  MOVF   30,W
12B2:  MOVWF  6C
12B3:  MOVLW  BC
12B4:  BCF    03.5
12B5:  BSF    03.6
12B6:  MOVWF  13
12B7:  MOVLW  74
12B8:  MOVWF  12
12B9:  MOVLW  13
12BA:  MOVWF  11
12BB:  MOVLW  76
12BC:  MOVWF  10
12BD:  BCF    0A.4
12BE:  BCF    03.6
12BF:  CALL   2EC
12C0:  BSF    0A.4
12C1:  BTFSC  2B.7
12C2:  BSF    0B.7
12C3:  MOVF   7A,W
12C4:  BSF    03.5
12C5:  MOVWF  2F
12C6:  MOVF   79,W
12C7:  MOVWF  2E
12C8:  MOVF   78,W
12C9:  MOVWF  2D
12CA:  MOVF   77,W
12CB:  MOVWF  2C
....................            
....................          for(a1=0; a1<16; a1++)
12CC:  BCF    03.5
12CD:  CLRF   6F
12CE:  CLRF   6E
12CF:  MOVF   6F,F
12D0:  BTFSS  03.2
12D1:  GOTO   2FF
12D2:  MOVF   6E,W
12D3:  SUBLW  0F
12D4:  BTFSS  03.0
12D5:  GOTO   2FF
....................             {
....................              CHUOI1[a1]=CHUOI1[a1+1];     
12D6:  MOVLW  5D
12D7:  ADDWF  6E,W
12D8:  BSF    03.5
12D9:  MOVWF  51
12DA:  BCF    03.5
12DB:  MOVF   6F,W
12DC:  BSF    03.5
12DD:  MOVWF  52
12DE:  BTFSC  03.0
12DF:  INCF   52,F
12E0:  MOVLW  01
12E1:  BCF    03.5
12E2:  ADDWF  6E,W
12E3:  BSF    03.5
12E4:  MOVWF  53
12E5:  BCF    03.5
12E6:  MOVF   6F,W
12E7:  BSF    03.5
12E8:  MOVWF  54
12E9:  BTFSC  03.0
12EA:  INCF   54,F
12EB:  MOVLW  5D
12EC:  ADDWF  53,W
12ED:  MOVWF  04
12EE:  BCF    03.7
12EF:  BTFSC  54.0
12F0:  BSF    03.7
12F1:  MOVF   00,W
12F2:  MOVWF  55
12F3:  MOVF   51,W
12F4:  MOVWF  04
12F5:  BCF    03.7
12F6:  BTFSC  52.0
12F7:  BSF    03.7
12F8:  MOVF   55,W
12F9:  MOVWF  00
12FA:  BCF    03.5
12FB:  INCF   6E,F
12FC:  BTFSC  03.2
12FD:  INCF   6F,F
12FE:  GOTO   2CF
....................              }
....................              CHUOI1[15]=MP+0x30;
12FF:  MOVLW  30
1300:  ADDWF  5A,W
1301:  MOVWF  6C
....................                
....................                lcd_gotoxy(21,1);
1302:  MOVLW  15
1303:  BSF    03.5
1304:  MOVWF  5F
1305:  MOVLW  01
1306:  MOVWF  60
1307:  BCF    0A.4
1308:  BSF    0A.3
1309:  BCF    03.5
130A:  CALL   28A
130B:  BSF    0A.4
130C:  BCF    0A.3
....................                for (a1=0; a1<16; a1++)
130D:  CLRF   6F
130E:  CLRF   6E
130F:  MOVF   6F,F
1310:  BTFSS  03.2
1311:  GOTO   32A
1312:  MOVF   6E,W
1313:  SUBLW  0F
1314:  BTFSS  03.0
1315:  GOTO   32A
....................                {lcd_putc(CHUOI1[a1]);
1316:  MOVLW  5D
1317:  ADDWF  6E,W
1318:  MOVWF  04
1319:  BCF    03.7
131A:  BTFSC  6F.0
131B:  BSF    03.7
131C:  MOVF   00,W
131D:  BSF    03.5
131E:  MOVWF  51
131F:  MOVWF  5E
1320:  BCF    0A.4
1321:  BSF    0A.3
1322:  BCF    03.5
1323:  CALL   29E
1324:  BSF    0A.4
1325:  BCF    0A.3
1326:  INCF   6E,F
1327:  BTFSC  03.2
1328:  INCF   6F,F
1329:  GOTO   30F
....................                }
....................                
....................                }
132A:  GOTO   65C
....................           else if(MP==50) 
132B:  MOVF   5A,W
132C:  SUBLW  32
132D:  BTFSS  03.2
132E:  GOTO   3A9
....................           { 
....................            lcd_gotoxy(31,1);
132F:  MOVLW  1F
1330:  BSF    03.5
1331:  MOVWF  5F
1332:  MOVLW  01
1333:  MOVWF  60
1334:  BCF    0A.4
1335:  BSF    0A.3
1336:  BCF    03.5
1337:  CALL   28A
1338:  BSF    0A.4
1339:  BCF    0A.3
....................            printf(lcd_putc,"30000");
133A:  MOVLW  F4
133B:  BSF    03.6
133C:  MOVWF  0D
133D:  MOVLW  07
133E:  MOVWF  0F
133F:  BCF    0A.4
1340:  BSF    0A.3
1341:  BCF    03.6
1342:  CALL   2E0
1343:  BSF    0A.4
1344:  BCF    0A.3
....................              a = 30000;
1345:  BSF    03.5
1346:  CLRF   23
1347:  MOVLW  60
1348:  MOVWF  22
1349:  MOVLW  6A
134A:  MOVWF  21
134B:  MOVLW  8D
134C:  MOVWF  20
134D:  BCF    03.5
134E:  CLRF   2B
134F:  BTFSC  0B.7
1350:  BSF    2B.7
1351:  BCF    0B.7
....................              c = a/b;
1352:  BSF    03.5
1353:  MOVF   23,W
1354:  MOVWF  6F
1355:  MOVF   22,W
1356:  MOVWF  6E
1357:  MOVF   21,W
1358:  MOVWF  6D
1359:  MOVF   20,W
135A:  MOVWF  6C
135B:  MOVF   27,W
135C:  BCF    03.5
135D:  BSF    03.6
135E:  MOVWF  13
135F:  BSF    03.5
1360:  BCF    03.6
1361:  MOVF   26,W
1362:  BCF    03.5
1363:  BSF    03.6
1364:  MOVWF  12
1365:  BSF    03.5
1366:  BCF    03.6
1367:  MOVF   25,W
1368:  BCF    03.5
1369:  BSF    03.6
136A:  MOVWF  11
136B:  BSF    03.5
136C:  BCF    03.6
136D:  MOVF   24,W
136E:  BCF    03.5
136F:  BSF    03.6
1370:  MOVWF  10
1371:  BCF    0A.4
1372:  BCF    03.6
1373:  CALL   2EC
1374:  BSF    0A.4
1375:  BTFSC  2B.7
1376:  BSF    0B.7
1377:  MOVF   7A,W
1378:  BSF    03.5
1379:  MOVWF  2B
137A:  MOVF   79,W
137B:  MOVWF  2A
137C:  MOVF   78,W
137D:  MOVWF  29
137E:  MOVF   77,W
137F:  MOVWF  28
1380:  BCF    03.5
1381:  CLRF   2B
1382:  BTFSC  0B.7
1383:  BSF    2B.7
1384:  BCF    0B.7
....................              d = c/(2.25e-3);
1385:  BSF    03.5
1386:  MOVF   2B,W
1387:  MOVWF  6F
1388:  MOVF   2A,W
1389:  MOVWF  6E
138A:  MOVF   29,W
138B:  MOVWF  6D
138C:  MOVF   28,W
138D:  MOVWF  6C
138E:  MOVLW  BC
138F:  BCF    03.5
1390:  BSF    03.6
1391:  MOVWF  13
1392:  MOVLW  74
1393:  MOVWF  12
1394:  MOVLW  13
1395:  MOVWF  11
1396:  MOVLW  76
1397:  MOVWF  10
1398:  BCF    0A.4
1399:  BCF    03.6
139A:  CALL   2EC
139B:  BSF    0A.4
139C:  BTFSC  2B.7
139D:  BSF    0B.7
139E:  MOVF   7A,W
139F:  BSF    03.5
13A0:  MOVWF  2F
13A1:  MOVF   79,W
13A2:  MOVWF  2E
13A3:  MOVF   78,W
13A4:  MOVWF  2D
13A5:  MOVF   77,W
13A6:  MOVWF  2C
....................                   }
13A7:  GOTO   65D
13A8:  BCF    03.5
....................           else if (MP==20)
13A9:  MOVF   5A,W
13AA:  SUBLW  14
13AB:  BTFSS  03.2
13AC:  GOTO   427
....................           { 
....................            lcd_gotoxy(31,1);
13AD:  MOVLW  1F
13AE:  BSF    03.5
13AF:  MOVWF  5F
13B0:  MOVLW  01
13B1:  MOVWF  60
13B2:  BCF    0A.4
13B3:  BSF    0A.3
13B4:  BCF    03.5
13B5:  CALL   28A
13B6:  BSF    0A.4
13B7:  BCF    0A.3
....................             printf(lcd_putc,"20000");
13B8:  MOVLW  F7
13B9:  BSF    03.6
13BA:  MOVWF  0D
13BB:  MOVLW  07
13BC:  MOVWF  0F
13BD:  BCF    0A.4
13BE:  BSF    0A.3
13BF:  BCF    03.6
13C0:  CALL   2E0
13C1:  BSF    0A.4
13C2:  BCF    0A.3
....................              a = 20000;
13C3:  BSF    03.5
13C4:  CLRF   23
13C5:  MOVLW  40
13C6:  MOVWF  22
13C7:  MOVLW  1C
13C8:  MOVWF  21
13C9:  MOVLW  8D
13CA:  MOVWF  20
13CB:  BCF    03.5
13CC:  CLRF   2B
13CD:  BTFSC  0B.7
13CE:  BSF    2B.7
13CF:  BCF    0B.7
....................              c = a/b;
13D0:  BSF    03.5
13D1:  MOVF   23,W
13D2:  MOVWF  6F
13D3:  MOVF   22,W
13D4:  MOVWF  6E
13D5:  MOVF   21,W
13D6:  MOVWF  6D
13D7:  MOVF   20,W
13D8:  MOVWF  6C
13D9:  MOVF   27,W
13DA:  BCF    03.5
13DB:  BSF    03.6
13DC:  MOVWF  13
13DD:  BSF    03.5
13DE:  BCF    03.6
13DF:  MOVF   26,W
13E0:  BCF    03.5
13E1:  BSF    03.6
13E2:  MOVWF  12
13E3:  BSF    03.5
13E4:  BCF    03.6
13E5:  MOVF   25,W
13E6:  BCF    03.5
13E7:  BSF    03.6
13E8:  MOVWF  11
13E9:  BSF    03.5
13EA:  BCF    03.6
13EB:  MOVF   24,W
13EC:  BCF    03.5
13ED:  BSF    03.6
13EE:  MOVWF  10
13EF:  BCF    0A.4
13F0:  BCF    03.6
13F1:  CALL   2EC
13F2:  BSF    0A.4
13F3:  BTFSC  2B.7
13F4:  BSF    0B.7
13F5:  MOVF   7A,W
13F6:  BSF    03.5
13F7:  MOVWF  2B
13F8:  MOVF   79,W
13F9:  MOVWF  2A
13FA:  MOVF   78,W
13FB:  MOVWF  29
13FC:  MOVF   77,W
13FD:  MOVWF  28
13FE:  BCF    03.5
13FF:  CLRF   2B
1400:  BTFSC  0B.7
1401:  BSF    2B.7
1402:  BCF    0B.7
....................              d = c/(2.25e-3);     
1403:  BSF    03.5
1404:  MOVF   2B,W
1405:  MOVWF  6F
1406:  MOVF   2A,W
1407:  MOVWF  6E
1408:  MOVF   29,W
1409:  MOVWF  6D
140A:  MOVF   28,W
140B:  MOVWF  6C
140C:  MOVLW  BC
140D:  BCF    03.5
140E:  BSF    03.6
140F:  MOVWF  13
1410:  MOVLW  74
1411:  MOVWF  12
1412:  MOVLW  13
1413:  MOVWF  11
1414:  MOVLW  76
1415:  MOVWF  10
1416:  BCF    0A.4
1417:  BCF    03.6
1418:  CALL   2EC
1419:  BSF    0A.4
141A:  BTFSC  2B.7
141B:  BSF    0B.7
141C:  MOVF   7A,W
141D:  BSF    03.5
141E:  MOVWF  2F
141F:  MOVF   79,W
1420:  MOVWF  2E
1421:  MOVF   78,W
1422:  MOVWF  2D
1423:  MOVF   77,W
1424:  MOVWF  2C
....................           }      
1425:  GOTO   65D
1426:  BCF    03.5
....................           else if (MP==100)
1427:  MOVF   5A,W
1428:  SUBLW  64
1429:  BTFSS  03.2
142A:  GOTO   4A5
....................           { 
....................            lcd_gotoxy(31,1);
142B:  MOVLW  1F
142C:  BSF    03.5
142D:  MOVWF  5F
142E:  MOVLW  01
142F:  MOVWF  60
1430:  BCF    0A.4
1431:  BSF    0A.3
1432:  BCF    03.5
1433:  CALL   28A
1434:  BSF    0A.4
1435:  BCF    0A.3
....................             printf(lcd_putc,"40000");
1436:  MOVLW  FA
1437:  BSF    03.6
1438:  MOVWF  0D
1439:  MOVLW  07
143A:  MOVWF  0F
143B:  BCF    0A.4
143C:  BSF    0A.3
143D:  BCF    03.6
143E:  CALL   2E0
143F:  BSF    0A.4
1440:  BCF    0A.3
....................              a = 40000;
1441:  BSF    03.5
1442:  CLRF   23
1443:  MOVLW  40
1444:  MOVWF  22
1445:  MOVLW  1C
1446:  MOVWF  21
1447:  MOVLW  8E
1448:  MOVWF  20
1449:  BCF    03.5
144A:  CLRF   2B
144B:  BTFSC  0B.7
144C:  BSF    2B.7
144D:  BCF    0B.7
....................              c = a/b;
144E:  BSF    03.5
144F:  MOVF   23,W
1450:  MOVWF  6F
1451:  MOVF   22,W
1452:  MOVWF  6E
1453:  MOVF   21,W
1454:  MOVWF  6D
1455:  MOVF   20,W
1456:  MOVWF  6C
1457:  MOVF   27,W
1458:  BCF    03.5
1459:  BSF    03.6
145A:  MOVWF  13
145B:  BSF    03.5
145C:  BCF    03.6
145D:  MOVF   26,W
145E:  BCF    03.5
145F:  BSF    03.6
1460:  MOVWF  12
1461:  BSF    03.5
1462:  BCF    03.6
1463:  MOVF   25,W
1464:  BCF    03.5
1465:  BSF    03.6
1466:  MOVWF  11
1467:  BSF    03.5
1468:  BCF    03.6
1469:  MOVF   24,W
146A:  BCF    03.5
146B:  BSF    03.6
146C:  MOVWF  10
146D:  BCF    0A.4
146E:  BCF    03.6
146F:  CALL   2EC
1470:  BSF    0A.4
1471:  BTFSC  2B.7
1472:  BSF    0B.7
1473:  MOVF   7A,W
1474:  BSF    03.5
1475:  MOVWF  2B
1476:  MOVF   79,W
1477:  MOVWF  2A
1478:  MOVF   78,W
1479:  MOVWF  29
147A:  MOVF   77,W
147B:  MOVWF  28
147C:  BCF    03.5
147D:  CLRF   2B
147E:  BTFSC  0B.7
147F:  BSF    2B.7
1480:  BCF    0B.7
....................              d = c/(2.25e-3);  
1481:  BSF    03.5
1482:  MOVF   2B,W
1483:  MOVWF  6F
1484:  MOVF   2A,W
1485:  MOVWF  6E
1486:  MOVF   29,W
1487:  MOVWF  6D
1488:  MOVF   28,W
1489:  MOVWF  6C
148A:  MOVLW  BC
148B:  BCF    03.5
148C:  BSF    03.6
148D:  MOVWF  13
148E:  MOVLW  74
148F:  MOVWF  12
1490:  MOVLW  13
1491:  MOVWF  11
1492:  MOVLW  76
1493:  MOVWF  10
1494:  BCF    0A.4
1495:  BCF    03.6
1496:  CALL   2EC
1497:  BSF    0A.4
1498:  BTFSC  2B.7
1499:  BSF    0B.7
149A:  MOVF   7A,W
149B:  BSF    03.5
149C:  MOVWF  2F
149D:  MOVF   79,W
149E:  MOVWF  2E
149F:  MOVF   78,W
14A0:  MOVWF  2D
14A1:  MOVF   77,W
14A2:  MOVWF  2C
....................           }
14A3:  GOTO   65D
14A4:  BCF    03.5
....................            else if (MP==22)
14A5:  MOVF   5A,W
14A6:  SUBLW  16
14A7:  BTFSS  03.2
14A8:  GOTO   529
....................           { output_bit(PIN_A0, 1);
14A9:  BSF    05.0
14AA:  BSF    03.5
14AB:  BCF    05.0
....................           c = 0;
14AC:  CLRF   2B
14AD:  CLRF   2A
14AE:  CLRF   29
14AF:  CLRF   28
....................           d = m = f = 0 ;
14B0:  CLRF   33
14B1:  CLRF   32
14B2:  CLRF   31
14B3:  CLRF   30
14B4:  MOVF   33,W
14B5:  MOVWF  54
14B6:  MOVF   32,W
14B7:  MOVWF  53
14B8:  MOVF   31,W
14B9:  MOVWF  52
14BA:  MOVF   30,W
14BB:  MOVWF  51
14BC:  BCF    0A.4
14BD:  BSF    0A.3
14BE:  BCF    03.5
14BF:  CALL   354
14C0:  BSF    0A.4
14C1:  BCF    0A.3
14C2:  MOVF   79,W
14C3:  MOVWF  75
14C4:  MOVF   78,W
14C5:  MOVWF  74
14C6:  CLRF   2B
14C7:  BTFSC  0B.7
14C8:  BSF    2B.7
14C9:  BCF    0B.7
14CA:  MOVF   75,W
14CB:  BSF    03.5
14CC:  MOVWF  6D
14CD:  MOVF   74,W
14CE:  MOVWF  6C
14CF:  BCF    0A.4
14D0:  BCF    03.5
14D1:  CALL   04F
14D2:  BSF    0A.4
14D3:  BTFSC  2B.7
14D4:  BSF    0B.7
14D5:  MOVF   7A,W
14D6:  BSF    03.5
14D7:  MOVWF  2F
14D8:  MOVF   79,W
14D9:  MOVWF  2E
14DA:  MOVF   78,W
14DB:  MOVWF  2D
14DC:  MOVF   77,W
14DD:  MOVWF  2C
....................           tien = 0.00000;
14DE:  CLRF   3B
14DF:  CLRF   3A
14E0:  CLRF   39
14E1:  CLRF   38
....................           k = LIT = 0;         
14E2:  CLRF   37
14E3:  CLRF   36
14E4:  CLRF   35
14E5:  CLRF   34
14E6:  MOVF   37,W
14E7:  MOVWF  54
14E8:  MOVF   36,W
14E9:  MOVWF  53
14EA:  MOVF   35,W
14EB:  MOVWF  52
14EC:  MOVF   34,W
14ED:  MOVWF  51
14EE:  BCF    0A.4
14EF:  BSF    0A.3
14F0:  BCF    03.5
14F1:  CALL   354
14F2:  BSF    0A.4
14F3:  BCF    0A.3
14F4:  MOVF   79,W
14F5:  MOVWF  7C
14F6:  MOVF   78,W
14F7:  MOVWF  7B
....................           lcd_gotoxy(31,1);
14F8:  MOVLW  1F
14F9:  BSF    03.5
14FA:  MOVWF  5F
14FB:  MOVLW  01
14FC:  MOVWF  60
14FD:  BCF    0A.4
14FE:  BSF    0A.3
14FF:  BCF    03.5
1500:  CALL   28A
1501:  BSF    0A.4
1502:  BCF    0A.3
....................           for (a1=0; a1<16; a1++)
1503:  CLRF   6F
1504:  CLRF   6E
1505:  MOVF   6F,F
1506:  BTFSS  03.2
1507:  GOTO   528
1508:  MOVF   6E,W
1509:  SUBLW  0F
150A:  BTFSS  03.0
150B:  GOTO   528
....................                {CHUOI1[a1]= 0x01;
150C:  MOVLW  5D
150D:  ADDWF  6E,W
150E:  MOVWF  04
150F:  BCF    03.7
1510:  BTFSC  6F.0
1511:  BSF    03.7
1512:  MOVLW  01
1513:  MOVWF  00
....................                lcd_putc(CHUOI1[a1]);         
1514:  MOVLW  5D
1515:  ADDWF  6E,W
1516:  MOVWF  04
1517:  BCF    03.7
1518:  BTFSC  6F.0
1519:  BSF    03.7
151A:  MOVF   00,W
151B:  BSF    03.5
151C:  MOVWF  51
151D:  MOVWF  5E
151E:  BCF    0A.4
151F:  BSF    0A.3
1520:  BCF    03.5
1521:  CALL   29E
1522:  BSF    0A.4
1523:  BCF    0A.3
1524:  INCF   6E,F
1525:  BTFSC  03.2
1526:  INCF   6F,F
1527:  GOTO   505
....................                }
....................           } 
1528:  GOTO   65C
....................           else if (MP ==23) 
1529:  MOVF   5A,W
152A:  SUBLW  17
152B:  BTFSS  03.2
152C:  GOTO   622
....................           {   
....................             NE:
....................             KEY_4X4();
152D:  BCF    0A.4
152E:  BSF    0A.3
152F:  BCF    03.5
1530:  BCF    03.6
1531:  CALL   26B
1532:  BSF    0A.4
1533:  BCF    0A.3
....................                if(MP!=0x0FF)
1534:  INCFSZ 5A,W
1535:  GOTO   537
1536:  GOTO   620
....................                   {
....................                      if(MP<11) 
1537:  MOVF   5A,W
1538:  SUBLW  0A
1539:  BTFSS  03.0
153A:  GOTO   619
....................                           {    m1 = m1++;
153B:  MOVF   73,W
153C:  MOVWF  7A
153D:  MOVF   72,W
153E:  INCF   72,F
153F:  BTFSC  03.2
1540:  INCF   73,F
1541:  MOVWF  72
1542:  MOVF   7A,W
1543:  MOVWF  73
....................                                b = b*(10^(m1)) + MP;
1544:  MOVF   72,W
1545:  XORLW  0A
1546:  MOVWF  77
1547:  MOVF   73,W
1548:  MOVWF  7A
1549:  MOVF   77,W
154A:  CLRF   2B
154B:  BTFSC  0B.7
154C:  BSF    2B.7
154D:  BCF    0B.7
154E:  BSF    03.5
154F:  MOVWF  6C
1550:  MOVF   73,W
1551:  MOVWF  6D
1552:  BCF    0A.4
1553:  BCF    03.5
1554:  CALL   04F
1555:  BSF    0A.4
1556:  BTFSC  2B.7
1557:  BSF    0B.7
1558:  CLRF   2B
1559:  BTFSC  0B.7
155A:  BSF    2B.7
155B:  BCF    0B.7
155C:  BSF    03.5
155D:  MOVF   27,W
155E:  BCF    03.5
155F:  BSF    03.6
1560:  MOVWF  1C
1561:  BSF    03.5
1562:  BCF    03.6
1563:  MOVF   26,W
1564:  BCF    03.5
1565:  BSF    03.6
1566:  MOVWF  1B
1567:  BSF    03.5
1568:  BCF    03.6
1569:  MOVF   25,W
156A:  BCF    03.5
156B:  BSF    03.6
156C:  MOVWF  1A
156D:  BSF    03.5
156E:  BCF    03.6
156F:  MOVF   24,W
1570:  BCF    03.5
1571:  BSF    03.6
1572:  MOVWF  19
1573:  MOVF   7A,W
1574:  MOVWF  20
1575:  MOVF   79,W
1576:  MOVWF  1F
1577:  MOVF   78,W
1578:  MOVWF  1E
1579:  MOVF   77,W
157A:  MOVWF  1D
157B:  BCF    0A.4
157C:  BCF    03.6
157D:  CALL   261
157E:  BSF    0A.4
157F:  BTFSC  2B.7
1580:  BSF    0B.7
1581:  MOVF   7A,W
1582:  BSF    03.5
1583:  MOVWF  54
1584:  MOVF   79,W
1585:  MOVWF  53
1586:  MOVF   78,W
1587:  MOVWF  52
1588:  MOVF   77,W
1589:  MOVWF  51
158A:  BCF    03.5
158B:  CLRF   2B
158C:  BTFSC  0B.7
158D:  BSF    2B.7
158E:  BCF    0B.7
158F:  BSF    03.5
1590:  CLRF   6D
1591:  BCF    03.5
1592:  MOVF   5A,W
1593:  BSF    03.5
1594:  MOVWF  6C
1595:  BCF    0A.4
1596:  BCF    03.5
1597:  CALL   04F
1598:  BSF    0A.4
1599:  BTFSC  2B.7
159A:  BSF    0B.7
159B:  BCF    03.1
159C:  CLRF   2B
159D:  BTFSC  0B.7
159E:  BSF    2B.7
159F:  BCF    0B.7
15A0:  BSF    03.5
15A1:  MOVF   54,W
15A2:  MOVWF  6F
15A3:  MOVF   53,W
15A4:  MOVWF  6E
15A5:  MOVF   52,W
15A6:  MOVWF  6D
15A7:  MOVF   51,W
15A8:  MOVWF  6C
15A9:  MOVF   7A,W
15AA:  BCF    03.5
15AB:  BSF    03.6
15AC:  MOVWF  13
15AD:  MOVF   79,W
15AE:  MOVWF  12
15AF:  MOVF   78,W
15B0:  MOVWF  11
15B1:  MOVF   77,W
15B2:  MOVWF  10
15B3:  BCF    0A.4
15B4:  BCF    03.6
15B5:  CALL   0E7
15B6:  BSF    0A.4
15B7:  BTFSC  2B.7
15B8:  BSF    0B.7
15B9:  MOVF   7A,W
15BA:  BSF    03.5
15BB:  MOVWF  27
15BC:  MOVF   79,W
15BD:  MOVWF  26
15BE:  MOVF   78,W
15BF:  MOVWF  25
15C0:  MOVF   77,W
15C1:  MOVWF  24
....................                                for(a2=0; a2<16; a2++)
15C2:  CLRF   71
15C3:  CLRF   70
15C4:  MOVF   71,F
15C5:  BTFSS  03.2
15C6:  GOTO   5EC
15C7:  MOVF   70,W
15C8:  SUBLW  0F
15C9:  BTFSS  03.0
15CA:  GOTO   5EC
....................                                {
....................                                   CHUOI2[a2]=CHUOI2[a2+1];
15CB:  MOVLW  C0
15CC:  ADDWF  70,W
15CD:  MOVWF  51
15CE:  MOVF   71,W
15CF:  MOVWF  52
15D0:  BTFSC  03.0
15D1:  INCF   52,F
15D2:  MOVLW  01
15D3:  ADDWF  70,W
15D4:  MOVWF  53
15D5:  MOVF   71,W
15D6:  MOVWF  54
15D7:  BTFSC  03.0
15D8:  INCF   54,F
15D9:  MOVLW  C0
15DA:  ADDWF  53,W
15DB:  MOVWF  04
15DC:  BCF    03.7
15DD:  BTFSC  54.0
15DE:  BSF    03.7
15DF:  MOVF   00,W
15E0:  MOVWF  55
15E1:  MOVF   51,W
15E2:  MOVWF  04
15E3:  BCF    03.7
15E4:  BTFSC  52.0
15E5:  BSF    03.7
15E6:  MOVF   55,W
15E7:  MOVWF  00
15E8:  INCF   70,F
15E9:  BTFSC  03.2
15EA:  INCF   71,F
15EB:  GOTO   5C4
....................                                 }
....................            
....................                                   CHUOI2[15]=MP+0x30;
15EC:  MOVLW  30
15ED:  BCF    03.5
15EE:  ADDWF  5A,W
15EF:  BSF    03.5
15F0:  MOVWF  4F
....................                                   lcd_gotoxy(21,2);
15F1:  MOVLW  15
15F2:  MOVWF  5F
15F3:  MOVLW  02
15F4:  MOVWF  60
15F5:  BCF    0A.4
15F6:  BSF    0A.3
15F7:  BCF    03.5
15F8:  CALL   28A
15F9:  BSF    0A.4
15FA:  BCF    0A.3
....................                                   for (a2=0; a2<16; a2++)
15FB:  CLRF   71
15FC:  CLRF   70
15FD:  MOVF   71,F
15FE:  BTFSS  03.2
15FF:  GOTO   618
1600:  MOVF   70,W
1601:  SUBLW  0F
1602:  BTFSS  03.0
1603:  GOTO   618
....................                                   {lcd_putc(CHUOI2[a2]);
1604:  MOVLW  C0
1605:  ADDWF  70,W
1606:  MOVWF  04
1607:  BCF    03.7
1608:  BTFSC  71.0
1609:  BSF    03.7
160A:  MOVF   00,W
160B:  BSF    03.5
160C:  MOVWF  51
160D:  MOVWF  5E
160E:  BCF    0A.4
160F:  BSF    0A.3
1610:  BCF    03.5
1611:  CALL   29E
1612:  BSF    0A.4
1613:  BCF    0A.3
1614:  INCF   70,F
1615:  BTFSC  03.2
1616:  INCF   71,F
1617:  GOTO   5FD
....................                                   }
....................              
....................                                 }
1618:  GOTO   620
....................                     else if (MP == 23)
1619:  MOVF   5A,W
161A:  SUBLW  17
161B:  BTFSS  03.2
161C:  GOTO   620
....................                          { goto LAP; }
161D:  BSF    03.5
161E:  GOTO   18C
161F:  BCF    03.5
....................                         } 
....................                         
....................                         goto NE; }
1620:  GOTO   52D
1621:  GOTO   65C
....................                
....................                     else if (MP == 24)
1622:  MOVF   5A,W
1623:  SUBLW  18
1624:  BTFSS  03.2
1625:  GOTO   65C
....................                          {
....................                             m1 =0;
1626:  CLRF   73
1627:  CLRF   72
....................                             b = 0; 
1628:  BSF    03.5
1629:  CLRF   27
162A:  CLRF   26
162B:  CLRF   25
162C:  CLRF   24
....................                             lcd_gotoxy(21,2);
162D:  MOVLW  15
162E:  MOVWF  5F
162F:  MOVLW  02
1630:  MOVWF  60
1631:  BCF    0A.4
1632:  BSF    0A.3
1633:  BCF    03.5
1634:  CALL   28A
1635:  BSF    0A.4
1636:  BCF    0A.3
....................                             for (a2=0; a2<16; a2++)
1637:  CLRF   71
1638:  CLRF   70
1639:  MOVF   71,F
163A:  BTFSS  03.2
163B:  GOTO   65C
163C:  MOVF   70,W
163D:  SUBLW  0F
163E:  BTFSS  03.0
163F:  GOTO   65C
....................                             {
....................                             CHUOI2[a2]= 0x01;
1640:  MOVLW  C0
1641:  ADDWF  70,W
1642:  MOVWF  04
1643:  BCF    03.7
1644:  BTFSC  71.0
1645:  BSF    03.7
1646:  MOVLW  01
1647:  MOVWF  00
....................                             lcd_putc(CHUOI2[a2]);
1648:  MOVLW  C0
1649:  ADDWF  70,W
164A:  MOVWF  04
164B:  BCF    03.7
164C:  BTFSC  71.0
164D:  BSF    03.7
164E:  MOVF   00,W
164F:  BSF    03.5
1650:  MOVWF  51
1651:  MOVWF  5E
1652:  BCF    0A.4
1653:  BSF    0A.3
1654:  BCF    03.5
1655:  CALL   29E
1656:  BSF    0A.4
1657:  BCF    0A.3
1658:  INCF   70,F
1659:  BTFSC  03.2
165A:  INCF   71,F
165B:  GOTO   639
165C:  BSF    03.5
....................                              }
....................                                 }
....................        }
....................                   
....................       lcd_gotoxy(1,1);                          // dong 1 
165D:  MOVLW  01
165E:  MOVWF  5F
165F:  MOVWF  60
1660:  BCF    0A.4
1661:  BSF    0A.3
1662:  BCF    03.5
1663:  CALL   28A
1664:  BSF    0A.4
1665:  BCF    0A.3
....................       printf(lcd_putc,"SO TIEN: %0.0f", tien);  // hien thi tien phai tra
1666:  MOVLW  4C
1667:  BSF    03.6
1668:  MOVWF  0D
1669:  MOVLW  08
166A:  MOVWF  0F
166B:  BCF    03.0
166C:  MOVLW  09
166D:  BSF    03.5
166E:  BCF    03.6
166F:  MOVWF  51
1670:  BCF    0A.4
1671:  BSF    0A.3
1672:  BCF    03.5
1673:  CALL   375
1674:  BSF    0A.4
1675:  BCF    0A.3
1676:  MOVLW  C9
1677:  MOVWF  04
1678:  BSF    03.5
1679:  MOVF   3B,W
167A:  MOVWF  54
167B:  MOVF   3A,W
167C:  MOVWF  53
167D:  MOVF   39,W
167E:  MOVWF  52
167F:  MOVF   38,W
1680:  MOVWF  51
1681:  CLRF   55
1682:  BCF    0A.4
1683:  BSF    0A.3
1684:  BCF    03.5
1685:  CALL   3EF
1686:  BSF    0A.4
1687:  BCF    0A.3
....................       lcd_gotoxy(1,2);                          // dong 2
1688:  MOVLW  01
1689:  BSF    03.5
168A:  MOVWF  5F
168B:  MOVLW  02
168C:  MOVWF  60
168D:  BCF    0A.4
168E:  BSF    0A.3
168F:  BCF    03.5
1690:  CALL   28A
1691:  BSF    0A.4
1692:  BCF    0A.3
....................       printf(lcd_putc,"SO LIT: %0.3f ", LIT);   // hien thi so lit 
1693:  MOVLW  54
1694:  BSF    03.6
1695:  MOVWF  0D
1696:  MOVLW  08
1697:  MOVWF  0F
1698:  BCF    03.0
1699:  MOVLW  08
169A:  BSF    03.5
169B:  BCF    03.6
169C:  MOVWF  51
169D:  BCF    0A.4
169E:  BSF    0A.3
169F:  BCF    03.5
16A0:  CALL   375
16A1:  BSF    0A.4
16A2:  BCF    0A.3
16A3:  MOVLW  C9
16A4:  MOVWF  04
16A5:  BSF    03.5
16A6:  MOVF   37,W
16A7:  MOVWF  54
16A8:  MOVF   36,W
16A9:  MOVWF  53
16AA:  MOVF   35,W
16AB:  MOVWF  52
16AC:  MOVF   34,W
16AD:  MOVWF  51
16AE:  MOVLW  03
16AF:  MOVWF  55
16B0:  BCF    0A.4
16B1:  BSF    0A.3
16B2:  BCF    03.5
16B3:  CALL   3EF
16B4:  BSF    0A.4
16B5:  BCF    0A.3
16B6:  MOVLW  20
16B7:  BSF    03.5
16B8:  MOVWF  5E
16B9:  BCF    0A.4
16BA:  BSF    0A.3
16BB:  BCF    03.5
16BC:  CALL   29E
16BD:  BSF    0A.4
16BE:  BCF    0A.3
....................       lcd_gotoxy(21,1);                         // dong 3
16BF:  MOVLW  15
16C0:  BSF    03.5
16C1:  MOVWF  5F
16C2:  MOVLW  01
16C3:  MOVWF  60
16C4:  BCF    0A.4
16C5:  BSF    0A.3
16C6:  BCF    03.5
16C7:  CALL   28A
16C8:  BSF    0A.4
16C9:  BCF    0A.3
....................       printf(lcd_putc,"CHON GIA:");             // hien thi gia tien hoac lit da nhap
16CA:  MOVLW  5C
16CB:  BSF    03.6
16CC:  MOVWF  0D
16CD:  MOVLW  08
16CE:  MOVWF  0F
16CF:  BCF    0A.4
16D0:  BSF    0A.3
16D1:  BCF    03.6
16D2:  CALL   2E0
16D3:  BSF    0A.4
16D4:  BCF    0A.3
....................       lcd_gotoxy(21,2);                         // dong 4
16D5:  MOVLW  15
16D6:  BSF    03.5
16D7:  MOVWF  5F
16D8:  MOVLW  02
16D9:  MOVWF  60
16DA:  BCF    0A.4
16DB:  BSF    0A.3
16DC:  BCF    03.5
16DD:  CALL   28A
16DE:  BSF    0A.4
16DF:  BCF    0A.3
....................       printf(lcd_putc,"DON GIA: ");             // hien thi don gia 1 lit
16E0:  MOVLW  61
16E1:  BSF    03.6
16E2:  MOVWF  0D
16E3:  MOVLW  08
16E4:  MOVWF  0F
16E5:  BCF    0A.4
16E6:  BSF    0A.3
16E7:  BCF    03.6
16E8:  CALL   2E0
16E9:  BSF    0A.4
16EA:  BCF    0A.3
....................      
....................                    
....................                 goto LAP;
16EB:  BSF    03.5
16EC:  GOTO   18C
....................                  
....................                   }
....................                   
16ED:  SLEEP
.................... 

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
